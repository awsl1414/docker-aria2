#zh_Hans#基本设置
#zh_Hant#基本設定
#en#Basic Settings

#zh_Hans#下载路径
#zh_Hant#下載路徑
#en#Download Path
dir=/downloads

#zh_Hans#下载指定文件中列出的URI。输入文件可以使用gzip压缩。当文件指定为-时，aria2将从标准输入读取输入。
#zh_Hans#重新加载指定文件中列出的URI
#zh_Hant#下載指定文件中列出的URI。輸入文件可以使用gzip壓縮。當文件指定為-時，aria2將從標準輸入讀取輸入。
#zh_Hant#重新加載指定文件中列出的URI
#en#Downloads the URIs listed in FILE.Input files can use gzip compression.
#en#When FILE is specified as -, aria2 will read the input from stdin.
#en#Downloads the URIs listed in FILE
input-file=/config/aria2.session

#zh_Hans#日志文件的路径. 如果设置为 "-", 日志则写入到 stdout. 如果设置为空字符串(""), 日志将不会记录到磁盘上.
#zh_Hans#日志文件
#zh_Hant#記錄檔案的路徑. 如果設定為 "-", 記錄則寫入到 stdout. 如果設定為空字串(""), 記錄將不會記錄到磁碟上.
#zh_Hant#記錄檔案
#en#The file name of the log file. If - is specified, log is written to stdout.
#en#If empty string("") is specified, or this option is omitted, no log is written to disk at all.
#en#Log File
log=/config/aria2.log

#zh_Hans#最大同时下载数
#zh_Hant#最大同時下載數
#en#Max Concurrent Downloads
max-concurrent-downloads=8

#zh_Hans#通过对文件的每个分块或整个文件进行哈希验证来检查文件的完整性. 此选项仅对BT、Metalink及设置了 --checksum 选项的 HTTP(S)/FTP 链接生效.
#zh_Hans#检查完整性 [true|false] 默认:false
#zh_Hant#通過對檔案的每個分塊或整個檔案進行雜湊驗證來檢查檔案的完整性. 此選項僅對BT、Metalink及設定了 --checksum 選項的 HTTP(S)/FTP 鏈接生效.
#zh_Hant#檢查完整性 [true|false] 默認:false
#en#Check file integrity by validating piece hashes or a hash of entire file.
#en#This option has effect only in BitTorrent, Metalink downloads with checksums or HTTP(S)/FTP downloads with --checksum option.
#en#Check Integrity [true|false] Default:false
#check-integrity=false

#zh_Hans#继续下载部分完成的文件. 启用此选项可以继续下载从浏览器或其他程序按顺序下载的文件. 此选项目前只支持 HTTP(S)/FTP 下载的文件.
#zh_Hans#断点续传 [true|false] 默认:true
#zh_Hant#繼續下載部分完成的檔案. 啟用此選項可以繼續下載從瀏覽器或其他程式依順序下載的檔案. 此選項目前只支援 HTTP(S)/FTP 下載的檔案.
#zh_Hant#斷點續傳 [true|false] 默認:true
#en#Continue downloading a partially downloaded file. Use this option to resume a download started by a web browser or another
#en#program which downloads files sequentially from the beginning. Currently this option is only applicable to HTTP(S)/FTP downloads.
#en#Resume Download [true|false] Default:true
continue=true


#zh_Hans#HTTP/FTP/SFTP 设置
#zh_Hant#HTTP/FTP/SFTP 設定
#en#HTTP/FTP/SFTP Settings

#zh_Hans#设置所有协议的代理服务器地址. 如果覆盖之前设置的代理服务器, 使用 "" 即可.
#zh_Hans#您还可以针对特定的协议覆盖此选项, 即使用 --http-proxy, --https-proxy 和 --ftp-proxy 选项.
#zh_Hans#此设置将会影响所有下载. 代理服务器地址的格式为 [http://][USER:PASSWORD@]HOST[:PORT].
#zh_Hans#代理服务器
#zh_Hant#設定所有協定的代理伺服器位址. 如果覆蓋之前設定的代理伺服器, 使用 "" 即可.
#zh_Hant#您還可以針對特定的協定覆蓋此選項, 即使用 --http-proxy, --https-proxy 和 --ftp-proxy 選項.
#zh_Hant#此設定將會影響所有下載. 代理伺服器位址的格式為 [http://][USER:PASSWORD@]HOST[:PORT].
#zh_Hant#代理伺服器
#en#Use a proxy server for all protocols. To override a previously defined proxy, use "".
#en#You also can override this setting and specify a proxy server for a particular protocol using --http-proxy,
#en#--https-proxy and --ftp-proxy  This affects all downloads. The format of PROXY is [http://][USER:PASSWORD@]HOST[:PORT].
#en#Proxy Server
#all-proxy=

#zh_Hans#代理服务器用户名
#zh_Hant#代理伺服器使用者名稱
#en#Proxy User Name
#all-proxy-user=

#zh_Hans#代理服务器密码
#zh_Hant#代理伺服器密碼
#en#Proxy Password
#all-proxy-passwd=

#zh_Hans#设置校验和。例如，设置sha-1摘要如下所示：sha-1=0192ba11326fe2298c8cb4de616f4d4140213838，此选项仅适用于 HTTP(S)/FTP下载
#zh_Hans#设置校验和
#zh_Hant#設置校驗和。例如，設置sha-1摘要如下所示：sha-1=0192ba11326fe2298c8cb4de616f4d4140213838，此選項僅適用於 HTTP(S)/FTP下載
#zh_Hant#設置校驗和
#en#Set checksum.For example, setting sha-1 digest looks like this: sha-1=0192ba11326fe2298c8cb4de616f4d4140213838
#en#This option applies only to HTTP(S)/FTP downloads.
#en#Set checksum
#checksum=

#zh_Hans#设置建立 HTTP/FTP/代理服务器 连接的超时时间(秒). 当连接建立后, 此选项不再生效, 请使用 --timeout 选项.
#zh_Hans#连接超时时间 默认:60
#zh_Hant#設定建立 HTTP/FTP/代理伺服器 連線的超時時間(秒). 當連線建立後, 此選項不再生效, 請使用 --timeout 選項.
#zh_Hant#連線超時時間 默認:60
#en#Set the connect timeout in seconds to establish connection to HTTP/FTP/proxy server.
#en#After the connection is established, this option makes no effect and --timeout option is used instead.
#en#Connect Timeout  Default:60
#connect-timeout=60

#zh_Hans#如果设置为"是", aria2 将仅检查远程文件是否存在而不会下载文件内容. 此选项仅对 HTTP/FTP 下载生效. 如果设置为 true, BT 下载将会直接取消.
#zh_Hans#模拟运行 [true|false] 默认:false
#zh_Hant#如果設定為"是", aria2 將僅檢查遠端檔案是否存在而不會下載檔案內容. 此選項僅對 HTTP/FTP 下載生效. 如果設定為 true, BT 下載將會直接取消.
#zh_Hant#模擬運行 [true|false] 默認:false
#en#If true is given, aria2 just checks whether the remote file is available and doesn\'t download data.
#en#This option has effect on HTTP/FTP download. BitTorrent downloads are canceled if true is specified.
#en#Dry Run [true|false] Default:false
#dry-run=false

#zh_Hans#当下载速度低于此选项设置的值(B/s) 时将会关闭连接. 0 表示不设置最小速度限制.
#zh_Hans#您可以增加数值的单位 K 或 M (1K = 1024, 1M = 1024K). 此选项不会影响 BT 下载.
#zh_Hans#最小速度限制
#zh_Hant#當下載速度低於此選項設定的值(B/s) 時將會關閉連線. 0 表示不設定最小速度限制.
#zh_Hant#您可以增加數值的單位 K 或 M (1K = 1024, 1M = 1024K). 此選項不會影響 BT 下載.
#zh_Hant#最小速度限制
#en#Close connection if download speed is lower than or equal to this value(bytes per sec).
#en# 0 means aria2 does not have a lowest speed limit. You can append K or M (1K = 1024, 1M = 1024K).
#en#This option does not affect BitTorrent downloads.
#en#Lowest Speed Limit Default:0
lowest-speed-limit=0

#zh_Hans#单服务器最大连接数 默认:32
#zh_Hant#單伺服器最大連線數 默認:32
#en#Max Connection Per Server Default:32
max-connection-per-server=32

#zh_Hans#如果 aria2 从远程 HTTP/FTP 服务器收到 "文件未找到" 的状态超过此选项设置的次数后下载将会失败.
#zh_Hans#设置为 0 将会禁用此选项. 此选项仅影响 HTTP/FTP 服务器. 重试时同时会记录重试次数, 所以也需要设置 --max-tries 这个选项.
#zh_Hans#文件未找到重试次数 默认:0
#zh_Hant#如果 aria2 從遠端 HTTP/FTP 伺服器收到 "檔案未找到" 的狀態超過此選項設定的次數後下載將會失敗.
#zh_Hant#設定為 0 將會停用此選項. 此選項僅影響 HTTP/FTP 伺服器. 重試時同時會記錄重試次數, 所以也需要設定 --max-tries 這個選項.
#zh_Hant#檔案未找到重試次數 默認:0
#en#If aria2 receives "file not found" status from the remote HTTP/FTP servers NUM times without getting a single byte,
#en#then force the download to fail. Specify 0 to disable this option. This options is effective only when using HTTP/FTP servers.
#en#The number of retry attempt is counted toward --max-tries, so it should be configured too.
#en#Max File Not Found Try Times Default:0
max-file-not-found=0

#zh_Hans#设置最大尝试次数. 0 表示不限制.
#zh_Hans#最大尝试次数 默认:5
#zh_Hant#設定最大嘗試次數. 0 表示不限制.
#zh_Hant#最大嘗試次數 默認:5
#en#Set number of tries. 0 means unlimited.
#en#Max Try Times Default:5
max-tries=5

#zh_Hans#aria2 不会分割小于 2*SIZE 字节的文件. 例如, 文件大小为 20MB, 如果 SIZE 为 10M, aria2 会把文件分成 2 段 [0-10MB) 和 [10MB-20MB),
#zh_Hans#并且使用 2 个源进行下载 (如果 --split >= 2). 如果 SIZE 为 15M, 由于 2*15M > 20MB, 因此 aria2 不会分割文件并使用 1 个源进行下载.
#zh_Hans#您可以增加数值的单位 K 或 M (1K = 1024, 1M = 1024K). 可以设置的值为: 1M-1024M.
#zh_Hans#最小文件分片大小 默認:20M
#zh_Hant#aria2 不會分割小於 2*SIZE 位元組的檔案. 例如, 檔案大小為 20MB, 如果 SIZE 為 10M, aria2 會把檔案分成 2 段 [0-10MB) 和 [10MB-20MB),
#zh_Hant#並且使用 2 個源進行下載 (如果 --split >= 2). 如果 SIZE 為 15M, 由於 2*15M > 20MB, 因此 aria2 不會分割檔案並使用 1 個源進行下載.
#zh_Hant#您可以增加數值的單位 K 或 M (1K = 1024, 1M = 1024K). 可以設定的值為: 1M-1024M.
#zh_Hant#最小檔案分段大小 默認:20M
#en#aria2 does not split less than 2*SIZE byte range. For example, let\'s consider downloading 20MiB file.
#en#If SIZE is 10M, aria2 can split file into 2 range [0-10MiB) and [10MiB-20MiB) and download it using 2 sources(if --split >= 2, of course).
#en#If SIZE is 15M, since 2*15M > 20MiB, aria2 does not split file and download it using 1 source. You can append K or M (1K = 1024, 1M = 1024K).
#en#Possible Values: 1M-1024M.
#en#Min Split Size Default:20M
min-split-size=20M

#zh_Hans#.netrc 文件路径 默認:$(HOME)/.netrc
#zh_Hant#.netrc 檔案路徑 默認:$(HOME)/.netrc
#en#.netrc Path Default:$(HOME)/.netrc
#netrc-path=

#zh_Hans#禁用 netrc  [true|false] 默认:false
#zh_Hant#停用 netrc [true|false] 默認:false
#en#Disable netrc [true|false] Default:false
no-netrc=true

#zh_Hans#设置不使用代理服务器的主机名, 域名, 包含或不包含子网掩码的网络地址, 多个使用逗号分隔.
#zh_Hans#不使用代理服务器列表
#zh_Hant#設定不使用代理伺服器的主機名, 域名, 包含或不包含子網掩碼的網路位址, 多個使用逗號分隔.
#zh_Hant#不使用代理伺服器清單
#en#Specify a comma separated list of host names, domains and network addresses with or without a subnet mask where no proxy should be used.
#en#No Proxy List
#no-proxy=

#zh_Hans#下载文件的文件名. 其总是相对于 --dir 选项中设置的路径. 当使用 --force-sequential 参数时此选项无效.
#zh_Hans#文件名
#zh_Hant#下載檔案的檔名. 其總是相對於 --dir 選項中設定的路徑. 當使用 --force-sequential 參數時此選項無效.
#zh_Hant#檔名
#en#The file name of the downloaded file. It is always relative to the directory given in --dir option.
#en#When the --force-sequential option is used, this option is ignored.
#en#File Name
#out=

#zh_Hans#设置用来请求代理服务器的方法. 方法可设置为 GET 或 TUNNEL. HTTPS 下载将忽略此选项并总是使用 TUNNEL.
#zh_Hans#代理服务器请求方法 默认:get
#zh_Hant#設定用來要求代理伺服器的方法. 方法可設定為 GET 或 TUNNEL. HTTPS 下載將忽略此選項並總是使用 TUNNEL.
#zh_Hant#代理伺服器要求方法 默認:get
#en#Set the method to use in proxy request. METHOD is either GET or TUNNEL. HTTPS downloads always use TUNNEL regardless of this option.
#en#Proxy Method Default:get
#proxy-method=get

#zh_Hans#从 HTTP/FTP 服务获取远程文件的时间戳, 如果可用将设置到本地文件
#zh_Hans#获取服务器文件时间  [true|false] 默认:false
#zh_Hant#從 HTTP/FTP 服務獲取遠端檔案的時間戳, 如果可用將設定到本機檔案
#zh_Hant#獲取伺服器檔案時間  [true|false] 默認:false
#en#Retrieve timestamp of the remote file from the remote HTTP/FTP server and if it is available, apply it to the local file.
#en#Remote File Timestamp  [true|false] Default:false
remote-time=true

#zh_Hans#当所有给定的 URI 地址都已使用, 继续使用已经使用过的 URI 地址.
#zh_Hans#URI 复用 [true|false] 默认:true
#zh_Hant#當所有給定的 URI 位址都已使用, 繼續使用已經使用過的 URI 位址.
#zh_Hant#URI 復用 [true|false] 默認:true
#en#Reuse already used URIs if no unused URIs are left.
#en#Reuse Uri [true|false] Default:true
reuse-uri=true

#zh_Hans#设置重试间隔时间(秒). 当此选项的值大于 0 时, aria2 在 HTTP 服务器返回 503 响应时将会重试.
#zh_Hans#重试等待时间 默认:0
#zh_Hant#設定重試間隔時間(秒). 當此選項的值大於 0 時, aria2 在 HTTP 伺服器返回 503 響應時將會重試.
#zh_Hant#重試等待時間 默認:0
#en#Set the seconds to wait between retries. When SEC > 0, aria2 will retry downloads when the HTTP server returns a 503 response.
#en#Retry Wait Default:0
retry-wait=10

#zh_Hans#指定用来保存服务器状态的文件名. 您可以使用 --server-stat-if 参数读取保存的数据.
#zh_Hans#服务器状态保存文件
#zh_Hant#指定用來儲存伺服器狀態的檔名. 您可以使用 --server-stat-if 參數讀取儲存的資料.
#zh_Hant#伺服器狀態儲存檔案
#en#Specify the file name to which performance profile of the servers is saved. You can load saved data using --server-stat-if option.
#en#Server Stat Output
#server-stat-of=

#zh_Hans#指定文件名以加载server-stat-of保存的服务器状态文件。加载的数据将用于一些URI选择器，例如反馈。
#zh_Hans#加载服务器状态文件
#zh_Hant#指定文件名以加載server-stat-of保存的服務器狀態文件。加載的數據將用於一些URI選擇器，例如反饋。
#zh_Hant#加載服務器狀態文件
#en#Specify the file name to load performance profile of the servers. The loaded data will be used in some URI selector such as feedback.
#en#load performance profile of the servers
#server-stat-if=

#zh_Hans#指定服务器状态的过期时间 (单位为秒).
#zh_Hans#服务器状态超时 默认:86400(24小时)
#zh_Hant#指定伺服器狀態的過期時間 (單位為秒).
#zh_Hant#伺服器狀態超時 默認:86400(24小時)
#en#Specifies timeout in seconds to invalidate performance profile of the servers since the last contact to them.
#en#Server Stat Timeout Default:86400(24hours)
#server-stat-timeout=86400

#zh_Hans#下载时使用 N 个连接. 如果提供超过 N 个 URI 地址, 则使用前 N 个地址, 剩余的地址将作为备用.
#zh_Hans#如果提供的 URI 地址不足 N 个, 这些地址多次使用以保证同时建立 N 个连接. 同一服务器的连接数会被 --max-connection-per-server 选项限制.
#zh_Hans#单任务连接数 默认:5
#zh_Hant#下載時使用 N 個連線. 如果提供超過 N 個 URI 位址, 則使用前 N 個位址, 剩餘的位址將作為備用.
#zh_Hant#如果提供的 URI 位址不足 N 個, 這些位址多次使用以保證同時建立 N 個連線. 同一伺服器的連線數會被 --max-connection-per-server 選項限制.
#zh_Hant#單工作連線數 默認:5
#en#Download a file using N connections. If more than N URIs are given, first N URIs are used and remaining URIs are used for backup.
#en#If less than N URIs are given, those URIs are used more than once so that N connections total are made simultaneously.
#en#The number of connections to the same host is restricted by the --max-connection-per-server option.
#en#Split Count Default:5
split=20

#zh_Hans#指定 HTTP/FTP 下载使用的分片选择算法. 分片表示的是并行下载时固定长度的分隔段.
#zh_Hans#如果设置为"默认", aria2 将会按减少建立连接数选择分片. 由于建立连接操作的成本较高, 因此这是合理的默认行为.
#zh_Hans#如果设置为"顺序", aria2 将选择索引最小的分片. 索引为 0 时表示为文件的第一个分片. 这将有助于视频的边下边播.
#zh_Hans#--enable-http-pipelining 选项有助于减少重连接的开销. 请注意, aria2 依赖于 --min-split-size 选项,
#zh_Hans#所以有必要对 --min-split-size 选项设置一个合理的值. 如果设置为"随机", aria2 将随机选择一个分片. 就像"顺序"一样,
#zh_Hans#依赖于 --min-split-size 选项. 如果设置为"几何", aria2 会先选择索引最小的分片, 然后会为之前选择的分片保留指数增长的空间.
#zh_Hans#这将减少建立连接的次数, 同时文件开始部分将会先行下载. 这也有助于视频的边下边播.
#zh_Hans#分片选择算法 默认:default
#zh_Hant#指定 HTTP/FTP 下載使用的分段選擇演算法. 分段表示的是並行下載時固定長度的分隔段.
#zh_Hant#如果設定為"預設", aria2 將會依減少建立連線數選擇分段. 由於建立連線操作的成本較高, 因此這是合理的預設行為.
#zh_Hant#如果設定為"順序", aria2 將選擇索引最小的分段. 索引為 0 時表示為檔案的第一個分段. 這將有助於視頻的邊下邊播.
#zh_Hant#--enable-http-pipelining 選項有助於減少重連線的開銷. 請注意, aria2 依賴於 --min-split-size 選項,
#zh_Hant#所以有必要對 --min-split-size 選項設定一個合理的值. 如果設定為"隨機", aria2 將隨機選擇一個分段. 就像"順序"一樣,
#zh_Hant#依賴於 --min-split-size 選項. 如果設定為"幾何", aria2 會先選擇索引最小的分段, 然後會為之前選擇的分段保留指數增長的空間.
#zh_Hant#這將減少建立連線的次數, 同時檔案開始部分將會先行下載. 這也有助於視頻的邊下邊播.
#zh_Hant#分段選擇演算法 默認:default
#en#Specify piece selection algorithm used in HTTP/FTP download.
#en#Piece means fixed length segment which is downloaded in parallel in segmented download. If default is given,
#en#aria2 selects piece so that it reduces the number of establishing connection.
#en#This is reasonable default behavior because establishing connection is an expensive operation.
#en#If inorder is given, aria2 selects piece which has minimum index. Index=0 means first of the file.
#en#This will be useful to view movie while downloading it. --enable-http-pipelining option may be useful to reduce re-connection overhead.
#en#Please note that aria2 honors --min-split-size option, so it will be necessary to specify a reasonable value to --min-split-size option.
#en#If random is given, aria2 selects piece randomly. Like inorder, --min-split-size option is honored.
#en#If geom is given, at the beginning aria2 selects piece which has minimum index like inorder,
#en#but it exponentially increasingly keeps space from previously selected piece.
#en#This will reduce the number of establishing connection and at the same time it will download the beginning part of the file first.
#en#This will be useful to view movie while downloading it.
#en#Piece Selection Algorithm Default:default
#stream-piece-selector=default

#zh_Hans#超时时间 默认:60
#zh_Hant#超時時間 默認:60
#en#Timeout Default:60
timeout=10

#zh_Hans#指定 URI 选择的算法. 可选的值包括 "按顺序", "反馈" 和 "自适应".
#zh_Hans#如果设置为"按顺序", URI 将按列表中出现的顺序使用. 如果设置为"反馈", aria2 将根据之前的下载速度选择 URI 列表中下载速度最快的服务器.
#zh_Hans#同时也将有效跳过无效镜像. 之前统计的下载速度将作为服务器状态文件的一部分, 参见 --server-stat-of 和 --server-stat-if 选项.
#zh_Hans#如果设置为"自适应", 将从最好的镜像和保留的连接里选择一项. 补充说明, 其返回的镜像没有被测试过, 同时如果每个镜像都已经被测试过时, 返回的镜像还会被重新测试.
#zh_Hans#否则, 其将不会选择其他镜像. 例如"反馈", 其使用服务器状态文件.
#zh_Hans#URI 选择算法 [inorder|feedback|adaptive] 默认:feedback
#zh_Hant#指定 URI 選擇的演算法. 可選的值包括 "依順序", "反饋" 和 "自適應".
#zh_Hant#如果設定為"依順序", URI 將依清單中出現的順序使用. 如果設定為"反饋", aria2 將根據之前的下載速度選擇 URI 清單中下載速度最快的伺服器.
#zh_Hant#同時也將有效跳過無效鏡像. 之前統計的下載速度將作為伺服器狀態檔案的一部分, 參見 --server-stat-of 和 --server-stat-if 選項.
#zh_Hant#如果設定為"自適應", 將從最好的鏡像和保留的連線裡選擇一項. 補充說明, 其返回的鏡像沒有被測試過, 同時如果每個鏡像都已經被測試過時, 返回的鏡像還會被重新測試.
#zh_Hant#否則, 其將不會選擇其他鏡像. 例如"反饋", 其使用伺服器狀態檔案.
#zh_Hant#URI 選擇演算法 [inorder|feedback|adaptive] 默認:feedback
#en#Specify URI selection algorithm. The possible values are inorder, feedback and adaptive. If inorder is given,
#en#URI is tried in the order appeared in the URI list. If feedback is given, aria2 uses download speed observed in the previous downloads
#en#and choose fastest server in the URI list. This also effectively skips dead mirrors.
#en#The observed download speed is a part of performance profile of servers mentioned in --server-stat-of and --server-stat-if  If adaptive is given,
#en#selects one of the best mirrors for the first and reserved connections. For supplementary ones, it returns mirrors which has not been tested yet,
#en#and if each of them has already been tested, returns mirrors which has to be tested again. Otherwise,
#en#it doesn\'t select anymore mirrors. Like feedback, it uses a performance profile of servers.
#en#URI Selection Algorithm [inorder|feedback|adaptive] Default:feedback
#uri-selector=feedback


#zh_Hans#HTTP 设置
#zh_Hant#HTTP 設定
#en#HTTP Settings

#zh_Hans#使用指定的ca-certificate来验证peers。证书文件必须是PEM格式，并且可以包含多个CA证书。使用--check-certificate选项启用验证。
#zh_Hans#指定ca-certificate
#zh_Hant#使用指定的ca-certificate來驗證peers。證書文件必須是PEM格式，並且可以包含多個CA證書。使用--check-certificate選項啟用驗證。
#zh_Hant#指定ca-certificate
#en#Use the certificate authorities in FILE to verify the peers.
#en#The certificate file must be in PEM format and can contain multiple CA certificates.
#en#Use --check-certificate option to enable verification.
#en#Use the certificate authorities in FILE
#ca-certificate=

#zh_Hans#使用指定的客户端证书。证书必须采用 PKCS12（.p12、.pfx）或PEM格式。
#zh_Hans#指定客户端证书
#zh_Hant#使用指定的客戶端證書。證書必須采用 PKCS12（.p12、.pfx）或PEM格式。
#zh_Hant#指定客戶端證書
#en#Use the client certificate in FILE. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format.
#en#Use the client certificate in FILE
#certificate=

#zh_Hans#检查证书 [true|false] 默认:true
#zh_Hant#檢查證書 [true|false] 默認:true
#en#Check Certificate [true|false] Default:true
#check-certificate=true

#zh_Hans#如果远程服务器的响应头中包含 Content-Encoding: gzip 或 Content-Encoding: deflate , 将发送包含 Accept: deflate, gzip 的请求头并解压缩响应.
#zh_Hans#支持 GZip [true|false] 默认:false
#zh_Hant#如果遠端伺服器的響應頭中包含 Content-Encoding: gzip 或 Content-Encoding: deflate , 將發送包含 Accept: deflate, gzip 的要求標頭並解壓縮響應.
#zh_Hant#支援 GZip [true|false] 默認:false
#en#Send Accept: deflate, gzip request header and inflate response if remote server responds with Content-Encoding: gzip or Content-Encoding: deflate.
#en#Accept GZip [true|false] Default:false
http-accept-gzip=true

#zh_Hans#仅当服务器需要时才发送 HTTP 认证请求头. 如果设置为"否", 每次都会发送认证请求头.
#zh_Hans#例外: 如果用户名和密码包含在 URI 中, 将忽略此选项并且每次都会发送认证请求头.
#zh_Hans#认证质询 [true|false] 默认:false
#zh_Hant#僅當伺服器需要時才發送 HTTP 認證要求標頭. 如果設定為"否", 每次都會發送認證要求標頭.
#zh_Hant#例外: 如果使用者名稱和密碼包含在 URI 中, 將忽略此選項並且每次都會發送認證要求標頭.
#zh_Hant#認證質詢 [true|false] 默認:false
#en#Send HTTP authorization header only when it is requested by the server.
#en#If false is set, then authorization header is always sent to the server.
#en#There is an exception: if user name and password are embedded in URI, authorization header is always sent to the server regardless of this option.
#en#Auth Challenge [true|false] Default:false
#http-auth-challenge=false

#zh_Hans#发送的请求头中将包含 Cache-Control: no-cache 和 Pragma: no-cache header 以避免内容被缓存.
#zh_Hans#如果设置为"否", 上述请求头将不会发送, 同时您也可以使用 --header 选项将 Cache-Control 请求头添加进去.
#zh_Hans#禁用缓存 [true|false] 默认:false
#zh_Hant#發送的要求標頭中將包含 Cache-Control: no-cache 和 Pragma: no-cache header 以避免內容被快取.
#zh_Hant#如果設定為"否", 上述要求標頭將不會發送, 同時您也可以使用 --header 選項將 Cache-Control 要求標頭加入進去.
#zh_Hant#停用快取 [true|false] 默認:false
#en#Send Cache-Control: no-cache and Pragma: no-cache header to avoid cached content.
#en#If false is given, these headers are not sent and you can add Cache-Control header with a directive you like using --header option.
#en#No Cache [true|false] Default:false
#http-no-cache=false

#zh_Hans#HTTP 默认用户名
#zh_Hant#HTTP 預設使用者名稱
#en#HTTP Default User Name
#http-user=

#zh_Hans#HTTP 默认密码
#zh_Hant#HTTP 預設密碼
#en#HTTP Default Password
#http-passwd=

#zh_Hans#HTTP 代理服务器
#zh_Hant#HTTP 代理伺服器
#en#HTTP Proxy Server
#http-proxy=

#zh_Hans#HTTP 代理服务器用户名
#zh_Hant#HTTP 代理伺服器使用者名稱
#en#HTTP Proxy User Name
#http-proxy-user=

#zh_Hans#HTTP 代理服务器密码
#zh_Hant#HTTP 代理伺服器密碼
#en#HTTP Proxy Password
#http-proxy-passwd=

#zh_Hans#HTTPS 代理服务器
#zh_Hant#HTTPS 代理伺服器
#en#HTTPS Proxy Server
#https-proxy=

#zh_Hans#HTTPS 代理服务器用户名
#zh_Hant#HTTPS 代理伺服器使用者名稱
#en#HTTPS Proxy User Name
#https-proxy-user=

#zh_Hans#HTTPS 代理服务器密码
#zh_Hant#HTTPS 代理伺服器密碼
#en#HTTPS Proxy Password
#https-proxy-passwd=

#zh_Hans#使用指定的私钥。私钥必须解密并采用 PEM 格式。给出加密的行为是未定义的。另请参见--certificate选项。
#zh_Hans#指定私钥
#zh_Hant#使用指定的私鑰。私鑰必須解密並采用 PEM 格式。給出加密的行為是未定義的。另請參見--certificate選項。
#zh_Hant#指定私鑰
#en#Use the private key in FILE. The private key must be decrypted and in PEM format.
#en#The behavior when encrypted one is given is undefined. See also --certificate option.
#en#Use the private key in FILE
#private-key=

#zh_Hans#设置 HTTP 请求来源 (Referer). 此选项将影响所有 HTTP/HTTPS 下载.
#zh_Hans#如果设置为 *, 请求来源将设置为下载链接. 此选项可以配合 --parameterized-uri 选项使用.
#zh_Hans#请求来源
#zh_Hant#設定 HTTP 要求來源 (Referer). 此選項將影響所有 HTTP/HTTPS 下載.
#zh_Hant#如果設定為 *, 要求來源將設定為下載連結. 此選項可以配合 --parameterized-uri 選項使用.
#zh_Hant#要求來源
#en#Set an http referrer (Referer). This affects all http/https downloads.
#en#If * is given, the download URI is also used as the referrer. This may be useful when used together with the --parameterized-uri option.
#en#Referer
#referer=

#zh_Hans#启用 HTTP/1.1 持久连接.
#zh_Hans#启用持久连接 [true|false] 默认:true
#zh_Hant#啟用 HTTP/1.1 持久連線.
#zh_Hant#啟用持久連線 [true|false] 默認:true
#en#Enable HTTP/1.1 persistent connection.
#en#Enable Persistent Connection [true|false] Default:true
#enable-http-keep-alive=true

#zh_Hans#启用 HTTP/1.1 管线化.
#zh_Hans#启用 HTTP 管线化 [true|false] 默认:false
#zh_Hant#啟用 HTTP/1.1 管線化.
#zh_Hant#啟用 HTTP 管線化 [true|false] 默認:false
#en#Enable HTTP/1.1 pipelining.
#en#Enable HTTP Pipelining [true|false] Default:false
#enable-http-pipelining=false

#zh_Hans#增加 HTTP 请求头内容. 每行放置一项, 每项包含 "请求头名: 请求头值".
#zh_Hans#自定义请求头
#zh_Hant#增加 HTTP 要求標頭內容. 每行放置一項, 每項包含 "標頭名: 標頭值".
#zh_Hant#自訂要求標頭
#en#Append HEADER to HTTP request header. Put one item per line, each item containing "header name: header value".
#en#Custom Header
#header=

#zh_Hans#从指定文件中加载Cookie，使用Firefox3格式 (SQLite3)、Chromium/Google Chrome (SQLite3) 和 Mozilla/Firefox(1.x/2.x)/Netscape 格式。
#zh_Hans#从指定文件中加载Cookie
#zh_Hant#從指定文件中加載Cookie，使用Firefox3格式 (SQLite3)、Chromium/Google Chrome (SQLite3) 和 Mozilla/Firefox(1.x/2.x)/Netscape 格式。
#zh_Hant#從指定文件中加載Cookie
#en#Load Cookies from FILE using the Firefox3 format (SQLite3), Chromium/Google Chrome (SQLite3) and the Mozilla/Firefox(1.x/2.x)/Netscape format.
#en#Load Cookies from FILE
#load-cookies=

#zh_Hans#以 Mozilla/Firefox(1.x/2.x)/Netscape 格式将 Cookies 保存到文件中. 如果文件已经存在, 将被覆盖.
#zh_Hans#会话过期的 Cookies 也将会保存, 其过期时间将会设置为 0.
#zh_Hans#Cookies 保存路径 默认:/path/to/file
#zh_Hant#以 Mozilla/Firefox(1.x/2.x)/Netscape 格式將 Cookies 儲存到檔案中. 如果檔案已經存在, 將被覆蓋.
#zh_Hant#會話過期的 Cookies 也將會儲存, 其過期時間將會設定為 0.
#zh_Hant#Cookies 儲存路徑 默認:/path/to/file
#en#Save Cookies to FILE in Mozilla/Firefox(1.x/2.x)/ Netscape format.
#en#If FILE already exists, it is overwritten. Session Cookies are also saved and their expiry values are treated as 0.
#en#Cookies Path Values:/path/to/file
#save-cookies=

#zh_Hans#第一次请求 HTTP 服务器时使用 HEAD 方法.
#zh_Hans#启用 HEAD 方法 [true|false] 默认:false
#zh_Hant#第一次要求 HTTP 伺服器時使用 HEAD 方法.
#zh_Hant#啟用 HEAD 方法 [true|false] 默認:false
#en#Use HEAD method for the first request to the HTTP server.
#en#Use HEAD Method [true|false] Default:false
#use-head=false

#zh_Hans#FTP/SFTP 设置
#zh_Hant#FTP/SFTP 設定
#en#FTP/SFTP Settings

#zh_Hans#FTP 默认用户名 默认:nonymous
#zh_Hant#FTP 預設使用者名稱 默認:nonymous
#en#FTP Default User Name Default:nonymous
#ftp-user=nonymous

#zh_Hans#如果 URI 中包含用户名单不包含密码, aria2 首先会从 .netrc 文件中获取密码.
#zh_Hans#如果在 .netrc 文件中找到密码, 则使用该密码. 否则, 使用此选项设置的密码.
#zh_Hans#FTP 默认密码 默认:ARIA2USER@
#zh_Hant#如果 URI 中包含使用者名稱單不包含密碼, aria2 首先會從 .netrc 檔案中獲取密碼.
#zh_Hant#如果在 .netrc 檔案中找到密碼, 則使用該密碼. 否則, 使用此選項設定的密碼.
#zh_Hant#FTP 預設密碼 默認:ARIA2USER@
#en#If user name is embedded but password is missing in URI, aria2 tries to resolve password using .netrc.
#en#If password is found in .netrc, then use it as password. If not, use the password specified in this option.
#en#FTP Default Password Default:ARIA2USER@
#ftp-passwd=ARIA2USER@

#zh_Hans#在 FTP 中使用被动模式. 如果设置为"否", 则使用主动模式. 此选项不适用于 SFTP 传输.
#zh_Hans#被动模式 [true|false] 默认:true
#zh_Hant#在 FTP 中使用被動模式. 如果設定為"否", 則使用主動模式. 此選項不適用於 SFTP 傳輸.
#zh_Hant#被動模式 [true|false] 默認:true
#en#Use the passive mode in FTP. If false is given, the active mode will be used. This option is ignored for SFTP transfer.
#en#Passive Mode [true|false] Default:true
#ftp-pasv=true

#zh_Hans#FTP 代理服务器
#zh_Hant#FTP 代理伺服器
#en#FTP Proxy Server
#ftp-proxy=

#zh_Hans#FTP 代理服务器用户名
#zh_Hant#FTP 代理伺服器使用者名稱
#en#FTP Proxy User Name
#ftp-proxy-user=

#zh_Hans#FTP 代理服务器密码
#zh_Hant#FTP 代理伺服器密碼
#en#FTP Proxy Password
#ftp-proxy-passwd=

#zh_Hans#传输类型 [binary|ascii] 默认:binary
#zh_Hant#傳輸類型 [binary|ascii] 默認:binary
#en#Transfer Type [binary|ascii] Default:binary
#ftp-type=binary

#zh_Hans#连接复用 [true|false] 默认:true
#zh_Hant#連線復用 [true|false] 默認:true
#en#Reuse Connection [true|false] Default:true
#ftp-reuse-connection=true

#zh_Hans#设置 SSH 主机公钥的校验和. TYPE 为哈希类型. 支持的哈希类型为 sha-1 和 md5. DIGEST 是十六进制摘要.
#zh_Hans#例如: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. 此选项可以在使用 SFTP 时用来验证服务器的公钥. 如果此选项不设置, 即保留默认, 不会进行任何验证。
#zh_Hans#SSH 公钥校验和
#zh_Hant#設定 SSH 主機公鑰的總和檢查碼. TYPE 為雜湊類型. 支援的雜湊類型為 sha-1 和 md5. DIGEST 是十六進位摘要.
#zh_Hant#例如: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. 此選項可以在使用 SFTP 時用來驗證伺服器的公鑰. 如果此選項不設定, 即保留預設, 不會進行任何驗證。
#zh_Hant#SSH 公鑰總和檢查碼
#en#Set checksum for SSH host public key. TYPE is hash type. The supported hash type is sha-1 or md5. DIGEST is hex digest.
#en#For example: sha-1=b030503d4de4539dc7885e6f0f5e256704edf4c3. This option can be used to validate server\'s public key when SFTP is used.
#en#If this option is not set, which is default, no validation takes place.
#en#SSH Public Key Checksum
#ssh-host-key-md=


#zh_Hans#BitTorrent 设置
#zh_Hant#BitTorrent 設定
#en#BitTorrent Settings

#zh_Hans#通过指定索引来设置要下载的文件。您可以使用--show-files选项找到文件索引。
#zh_Hant#通過指定索引來設置要下載的文件。您可以使用--show-files選項找到文件索引。
#en#Set file to download by specifying its index. You can find the file index using the --show-files option.
#select-file=

#zh_Hans#打印“.torrent”、“.meta4”和“.metalink”文件的文件列表并退出。如果是“.torrent”文件，还会打印附加信息（信息哈希、片段长度等）。
#zh_Hant#打印「.torrent」、「.meta4」和「.metalink」文件的文件列表並退出。如果是「.torrent」文件，還會打印附加信息（信息哈希、片段長度等）。
#en#Print file listing of ".torrent", ".meta4" and ".metalink" file and exit.
#en#In case of ".torrent" file, additional information (infohash, piece length, etc) is also printed.
#show-files=

#zh_Hans#统计当前活动下载任务(参见 -j 选项) 时排除仅做种的任务. 这意味着, 如果参数设置为 -j3,
#zh_Hans#此选项打开并且当前有 3 个正在活动的任务, 并且其中有 1 个进入做种模式, 那么其会从正在下载的数量中排除(即数量会变为 2),
#zh_Hans#在队列中等待的下一个任务将会开始执行. 但要知道, 在 RPC 方法中, 做种的任务仍然被认为是活动的下载任务.
#zh_Hans#分离仅做种任务 [true|false] 默认:false
#zh_Hant#統計目前活動下載工作(參見 -j 選項) 時排除僅做種的工作. 這意味著, 如果參數設定為 -j3,
#zh_Hant#此選項打開並且目前有 3 個正在活動的工作, 並且其中有 1 個進入做種模式, 那麼其會從正在下載的數量中排除(即數量會變為 2),
#zh_Hant#在隊列中等待的下一個工作將會開始執行. 但要知道, 在 RPC 方法中, 做種的工作仍然被認為是活動的下載工作.
#zh_Hant#分離僅做種工作 [true|false] 默認:false
#en#Exclude seed only downloads when counting concurrent active downloads (See -j option).
#en#This means that if -j3 is given and this option is turned on and 3 downloads are active and one of those enters seed mode,
#en#then it is excluded from active download count (thus it becomes 2),
#en#and the next download waiting in queue gets started. But be aware that seeding item is still recognized as active download in RPC method.
#en#Detach Seed Only [true|false] Default:false
bt-detach-seed-only=true

#zh_Hans#允许 BT 下载哈希检查(参见 -V 选项) 完成后调用命令.
#zh_Hans#默认情况下, 当哈希检查成功后, 通过 --on-bt-download-complete 设置的命令将会被执行. 如果要禁用此行为, 请设置为"否".
#zh_Hans#启用哈希检查完成事件 [true|false] 默认:true
#zh_Hant#允許 BT 下載雜湊檢查(參見 -V 選項) 完成後調用命令.
#zh_Hant#預設情況下, 當雜湊檢查成功後, 通過 --on-bt-download-complete 設定的命令將會被執行. 如果要停用此行為, 請設定為"否".
#zh_Hant#啟用雜湊檢查完成事件 [true|false] 默認:true
#en#Allow hook command invocation after hash check (see -V option) in BitTorrent download.
#en#By default, when hash check succeeds, the command given by --on-bt-download-complete is executed.
#en#To disable this action, give false to this option.
#en#Enable Hook After Hash Check [true|false] Default:true
#bt-enable-hook-after-hash-check=true

#zh_Hans#启用本地节点发现  (LPD) [true|false] 默认:false
#zh_Hant#啟用本機節點發現  (LPD) [true|false] 默認:false
#en#Enable Local Peer Discovery. If a private flag is set in a torrent, aria2 doesn\'t use this feature for that download even if true is given.
#en#Enable Local Peer Discovery (LPD) [true|false] Default:false
bt-enable-lpd=true

#zh_Hans#逗号分隔的 BT 排除服务器地址. 您可以使用 * 匹配所有地址, 因此将排除所有服务器地址. 当在 shell 命令行使用 * 时, 需要使用转义符或引号.
#zh_Hans#BT 排除服务器地址
#zh_Hant#逗號分隔的 BT 排除伺服器位址. 您可以使用 * 匹配所有位址, 因此將排除所有伺服器位址. 當在 shell 命令行使用 * 時, 需要使用跳脫字元或引號.
#zh_Hant#BT 排除伺服器位址
#en#Comma separated list of BitTorrent tracker\'s announce URI to remove.
#en#You can use special value * which matches all URIs, thus removes all announce URIs.
#en#When specifying * in shell command-line, don\'t forget to escape or quote it.
#en#BitTorrent Exclude Trackers
#bt-exclude-tracker=

#zh_Hans#指定用在 BitTorrent 下载和 DHT 中的外部 IP 地址. 它可能被发送到 BitTorrent 服务器.
#zh_Hans#对于 DHT, 此选项将会报告本地节点正在下载特定的种子. 这对于在私有网络中使用 DHT 非常关键. 虽然这个方法叫外部, 但其可以接受各种类型的 IP 地址.
#zh_Hans#外部 IP 地址
#zh_Hant#指定用在 BitTorrent 下載和 DHT 中的外部 IP 位址. 它可能被發送到 BitTorrent 伺服器.
#zh_Hant#對於 DHT, 此選項將會報告本機節點正在下載特定的種子. 這對於在私有網路中使用 DHT 非常關鍵. 雖然這個方法叫外部, 但其可以接受各種類型的 IP 位址.
#zh_Hant#外部 IP 位址
#en#Specify the external IP address to use in BitTorrent download and DHT.
#en#It may be sent to BitTorrent tracker. For DHT, this option should be set to report that local node is downloading a particular torrent.
#en#This is critical to use DHT in a private network. Although this function is named external, it can accept any kind of IP addresses.
#en#External IP
#bt-external-ip=

#zh_Hans#BT 消息中的内容需要使用 arc4 加密. 此选项是设置 --bt-require-crypto --bt-min-crypto-level=arc4 这两个选项的快捷方式.
#zh_Hans#此选项不会修改上述两个选项的内容. 如果设置为"是", 将拒绝以前的 BT 握手, 并仅使用模糊握手及加密消息.
#zh_Hans#强制加密 [true|false] 默认:false
#zh_Hant#BT 消息中的內容需要使用 arc4 加密. 此選項是設定 --bt-require-crypto --bt-min-crypto-level=arc4 這兩個選項的快捷方式.
#zh_Hant#此選項不會修改上述兩個選項的內容. 如果設定為"是", 將拒絕以前的 BT 握手, 並僅使用模糊握手及加密消息.
#zh_Hant#強制加密 [true|false] 默認:false
#en#Requires BitTorrent message payload encryption with arc4. This is a shorthand of --bt-require-crypto --bt-min-crypto-level=arc4.
#en#This option does not change the option value of those options.
#en#If true is given, deny legacy BitTorrent handshake and only use Obfuscation handshake and always encrypt message payload.
#en#Force Encryption [true|false] Default:false
bt-force-encryption=true

#zh_Hans#如果设置为"是", 当使用 --check-integrity 选项完成哈希检查及文件完成后才继续做种.
#zh_Hans#如果您希望仅当文件损坏或未完成时检查文件, 请设置为"否". 此选项仅对 BT 下载有效
#zh_Hans#做种前检查文件哈希 [true|false] 默认:true
#zh_Hant#如果設定為"是", 當使用 --check-integrity 選項完成雜湊檢查及檔案完成後才繼續做種.
#zh_Hant#如果您希望僅當檔案損壞或未完成時檢查檔案, 請設定為"否". 此選項僅對 BT 下載有效
#zh_Hant#做種前檢查檔案雜湊 [true|false] 默認:true
#en#If true is given, after hash check using --check-integrity option and file is complete, continue to seed file.
#en#If you want to check file and download it only when it is damaged or incomplete, set this option to false.
#en#This option has effect only on BitTorrent download.
#en#Hash Check Before Seeding [true|false] Default:true
bt-hash-check-seed=true

#zh_Hans#当使用磁链下载时, 在从 DHT 获取种子元数据之前,
#zh_Hans#首先尝试加载使用 --bt-save-metadata 选项保存的文件. 如果文件加载成功, 则不会从 DHT 下载元数据.
#zh_Hans#加载已保存的元数据文件 [true|false] 默认:false
#zh_Hant#當使用磁力連結下載時, 在從 DHT 獲取種子中繼資料之前,
#zh_Hant#首先嘗試載入使用 --bt-save-metadata 選項儲存的檔案. 如果檔案載入成功, 則不會從 DHT 下載中繼資料.
#zh_Hant#載入已儲存的中繼資料檔案 [true|false] 默認:false
#en#Before getting torrent metadata from DHT when downloading with magnet link,
#en#first try to read file saved by --bt-save-metadata option. If it is successful, then skip downloading metadata from DHT.
#en#Load Saved Metadata File [true|false] Default:false
bt-load-saved-metadata=true

#zh_Hans#使用指定接口进行本地Peer发现。
#zh_Hant#指用給定接口進行本地Peer發現
#en#Use given interface for Local Peer Discovery.
#bt-lpd-interface=

#zh_Hans#设置 BT/Metalink 下载全局打开的最大文件数.
#zh_Hans#最多打开文件数 默认:100
#zh_Hant#設定 BT/Metalink 下載全域打開的最大檔案數.
#zh_Hant#最多打開檔案數 默認:100
#en#Specify maximum number of files to open in multi-file BitTorrent/Metalink download globally.
#en#Max Open Files Default:100
#bt-max-open-files=100

#zh_Hans#设置每个 BT 下载的最大连接节点数. 0 表示不限制.
#zh_Hans#最大连接节点数 默认:55
#zh_Hant#設定每個 BT 下載的最大連線節點數. 0 表示不限制.
#zh_Hant#最大連線節點數 默認:55
#en#Specify the maximum number of peers per torrent. 0 means unlimited.
#en#Max Peers Default:55
bt-max-peers=100

#zh_Hans#仅下载种子文件. 种子文件中描述的文件将不会下载. 此选项仅对磁链生效.
#zh_Hans#仅下载种子文件 [true|false] 默认:false
#zh_Hant#僅下載種子檔案. 種子檔案中描述的檔案將不會下載. 此選項僅對磁力連結生效.
#zh_Hant#僅下載種子檔案 [true|false] 默認:false
#en#Download meta data only. The file(s) described in meta data will not be downloaded.
#en#This option has effect only when BitTorrent Magnet URI is used.
#en#Download Metadata Only [true|false] Default:false
#bt-metadata-only=false

#zh_Hans#设置加密方法的最小级别. 如果节点提供多种加密方法, aria2 将选择满足给定级别的最低级别.
#zh_Hans#最低加密级别 [plain|arc4] 默认:plain
#zh_Hant#設定加密方法的最小層級. 如果節點提供多種加密方法, aria2 將選擇滿足給定層級的最低層級.
#zh_Hant#最低加密層級 [plain|arc4] 默認:plain
#en#Set minimum level of encryption method. If several encryption methods are provided by a peer,
#en#aria2 chooses the lowest one which satisfies the given level.
#en#Min Crypto Level [plain|arc4] Default:plain
bt-min-crypto-level=arc4

#zh_Hans#尝试先下载每个文件开头或结尾的分片. 此选项有助于预览文件.
#zh_Hans#参数可以包括两个关键词: head 和 tail. 如果包含两个关键词, 需要使用逗号分隔.
#zh_Hans#每个关键词可以包含一个参数, SIZE. 例如, 如果指定 head=SIZE, 每个文件的最前 SIZE 数据将会获得更高的优先级.
#zh_Hans#tail=SIZE 表示每个文件的最后 SIZE 数据. SIZE 可以包含 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hans#优先下载 head[=<SIZE>],tail[=<SIZE>]
#zh_Hant#嘗試先下載每個檔案開頭或結尾的分段. 此選項有助於預覽檔案.
#zh_Hant#參數可以包括兩個關鍵詞: head 和 tail. 如果包含兩個關鍵詞, 需要使用逗號分隔.
#zh_Hant#每個關鍵詞可以包含一個參數, SIZE. 例如, 如果指定 head=SIZE, 每個檔案的最前 SIZE 資料將會獲得更高的優先順序.
#zh_Hant#tail=SIZE 表示每個檔案的最後 SIZE 資料. SIZE 可以包含 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hant#優先下載 head[=<SIZE>],tail[=<SIZE>]
#en#Try to download first and last pieces of each file first. This is useful for previewing files.
#en#The argument can contain 2 keywords: head and tail. To include both keywords, they must be separated by comma.
#en#These keywords can take one parameter, SIZE. For example,
#en#if head=SIZE is specified, pieces in the range of first SIZE bytes of each file get higher priority.
#en#tail=SIZE means the range of last SIZE bytes of each file. SIZE can include K or M (1K = 1024, 1M = 1024K).
#en#Prioritize Piece head[=<SIZE>],tail[=<SIZE>]
bt-prioritize-piece=head=16M,tail=16M

#zh_Hans#当 BT 任务完成后删除未选择的文件. 要选择需要下载的文件, 请使用 --select-file 选项.
#zh_Hans#如果没有选择, 则所有文件都默认为需要下载. 此选项会从磁盘上直接删除文件, 请谨慎使用此选项.
#zh_Hans#删除未选择的文件 [true|false] 默认:false
#zh_Hant#當 BT 工作完成後刪除未選擇的檔案. 要選擇需要下載的檔案, 請使用 --select-file 選項.
#zh_Hant#如果沒有選擇, 則所有檔案都預設為需要下載. 此選項會從磁碟上直接刪除檔案, 請謹慎使用此選項.
#zh_Hant#刪除未選擇的檔案 [true|false] 默認:false
#en#Removes the unselected files when download is completed in BitTorrent.
#en#To select files, use --select-file option. If it is not used, all files are assumed to be selected.
#en#Please use this option with care because it will actually remove files from your disk.
#en#Remove Unselected File [true|false] Default:false
bt-remove-unselected-file=true

#zh_Hans#如果设置为"是", aria 将不会接受以前的 BitTorrent 握手协议(\19BitTorrent 协议)并建立连接. 因此 aria2 总是模糊握手.
#zh_Hans#需要加密 [true|false] 默认:false
#zh_Hant#如果設定為"是", aria 將不會接受以前的 BitTorrent 握手協定(\19BitTorrent 協定)並建立連線. 因此 aria2 總是模糊握手.
#zh_Hant#需要加密 [true|false] 默認:false
#en#If true is given, aria2 doesn\'t accept and establish connection with legacy BitTorrent handshake(\\19BitTorrent protocol).
#en#Thus aria2 always uses Obfuscation handshake.
#en#Require Crypto [true|false] Default:false
bt-require-crypto=true

#zh_Hans#如果一个 BT 下载的整体下载速度低于此选项设置的值, aria2 会临时提高连接数以提高下载速度.
#zh_Hans#在某些情况下, 设置期望下载速度可以提高您的下载速度. 您可以增加数值的单位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hans#期望下载速度默认:50K
#zh_Hant#如果一個 BT 下載的整體下載速度低於此選項設定的值, aria2 會臨時提高連線數以提高下載速度.
#zh_Hant#在某些情況下, 設定期望下載速度可以提高您的下載速度. 您可以增加數值的單位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hant#期望下載速度 默認:50K
#en#If the whole download speed of every torrent is lower than SPEED,
#en#aria2 temporarily increases the number of peers to try for more download speed.
#en#Configuring this option with your preferred download speed can increase your download speed in some cases.
#en#You can append K or M (1K = 1024, 1M = 1024K).
#en#Preferred Download Speed Default:50K
bt-request-peer-speed-limit=10M

#zh_Hans#保存种子文件为 ".torrent" 文件. 此选项仅对磁链生效. 文件名为十六进制编码后的哈希值及 ".torrent"后缀.
#zh_Hans#保存的目录与下载文件的目录相同. 如果相同的文件已存在, 种子文件将不会保存.
#zh_Hans#保存种子文件 [true|false] 默认:false
#zh_Hant#儲存種子檔案為 ".torrent" 檔案. 此選項僅對磁力連結生效. 檔名為十六進位編碼後的雜湊值及 ".torrent"副檔名.
#zh_Hant#儲存的目錄與下載檔案的目錄相同. 如果相同的檔案已存在, 種子檔案將不會儲存.
#zh_Hant#儲存種子檔案 [true|false] 默認:false
#en#Save meta data as ".torrent" file. This option has effect only when BitTorrent Magnet URI is used.
#en#The file name is hex encoded info hash with suffix ".torrent".
#en#The directory to be saved is the same directory where download file is saved. If the same file already exists, meta data is not saved.
#en#Save Metadata [true|false] Default:false
bt-save-metadata=true

#zh_Hans#不检查之前下载文件中每个分片的哈希值.
#zh_Hans#不检查已经下载的文件 [true|false] 默认:false
#zh_Hant#不檢查之前下載檔案中每個分段的雜湊值.
#zh_Hant#不檢查已經下載的檔案 [true|false] 默認:false
#en#Seed previously downloaded files without verifying piece hashes.
#en#Not Verify Downloaded Fileds [true|false] Default:false
bt-seed-unverified=false

#zh_Hans#当 BT 任务下载速度持续为 0, 达到此选项设置的时间后停止下载. 如果设置为 0, 此功能将禁用.
#zh_Hans#无速度时自动停止时间 默认:0
#zh_Hant#當 BT 工作下載速度持續為 0, 達到此選項設定的時間後停止下載. 如果設定為 0, 此功能將停用.
#zh_Hant#無速度時自動停止時間 默認:0
#en#Stop BitTorrent download if download speed is 0 in consecutive SEC seconds. If 0 is given, this feature is disabled.
#en#Stop Timeout Default:0
#bt-stop-timeout=0

#zh_Hans#逗号分隔的 BT 服务器地址. 这些地址不受 --bt-exclude-tracker 选项的影响, 因为这些地址在 --bt-exclude-tracker 选项排除掉其他地址之后才会添加.
#zh_Hans#BT 服务器地址
#zh_Hant#逗號分隔的 BT 伺服器位址. 這些位址不受 --bt-exclude-tracker 選項的影響, 因為這些位址在 --bt-exclude-tracker 選項排除掉其他位址之後才會加入.
#zh_Hant#BT 伺服器位址
#en#Comma separated list of additional BitTorrent tracker\'s announce URI.
#en#These URIs are not affected by --bt-exclude-tracker option because they are added after URIs in --bt-exclude-tracker option are removed.
#en#BitTorrent Trackers
bt-tracker=

#zh_Hans#设置 BT 服务器的连接超时时间 (秒). 当连接建立后, 此选项不再生效, 请使用 --bt-tracker-timeout 选项.
#zh_Hans#BT 服务器连接超时时间 默认:60
#zh_Hant#設定 BT 伺服器的連線超時時間 (秒). 當連線建立後, 此選項不再生效, 請使用 --bt-tracker-timeout 選項.
#zh_Hant#BT 伺服器連線超時時間 默認:60
#en#Set the connect timeout in seconds to establish connection to tracker.
#en#After the connection is established, this option makes no effect and --bt-tracker-timeout option is used instead.
#en#BitTorrent Tracker Connect Timeout Default:60
bt-tracker-connect-timeout=10

#zh_Hans#设置请求 BT 服务器的间隔时间 (秒). 此选项将完全覆盖服务器返回的最小间隔时间和间隔时间, aria2 仅使用此选项的值.
#zh_Hans#如果设置为 0, aria2 将根据服务器的响应情况和下载进程决定时间间隔.
#zh_Hans#BT 服务器连接间隔时间 默认:
#zh_Hant#設定要求 BT 伺服器的間隔時間 (秒). 此選項將完全覆蓋伺服器返回的最小間隔時間和間隔時間, aria2 僅使用此選項的值.
#zh_Hant#如果設定為 0, aria2 將根據伺服器的響應情況和下載處理程序決定時間間隔.
#zh_Hant#BT 伺服器連線間隔時間 默認:
#en#Set the interval in seconds between tracker requests.
#en#This completely overrides interval value and aria2 just uses this value and ignores the min interval and interval value in the response of tracker.
#en#If 0 is set, aria2 determines interval based on the response of tracker and the download progress.
#en#BitTorrent Tracker Connect Interval Default:0
bt-tracker-interval=0

#zh_Hans#BT 服务器超时时间 默认:60
#zh_Hant#BT 伺服器超時時間 默認:60
#en#BitTorrent Tracker Timeout Default:60
bt-tracker-timeout=10

#zh_Hans#IPv4的DHT网络的入口点
#zh_Hant#IPv4的DHT網絡的入口點
#en#entry point to IPv4 DHT network.
#dht-entry-point=

#zh_Hans#IPv6的DHT网络的入口点
#zh_Hant#IPv6的DHT網絡的入口點
#en#entry point to IPv6 DHT network.
#dht-entry-point6=

#zh_Hans#修改 IPv4 DHT 路由表文件路径.
#zh_Hans#DHT (IPv4) 文件 默认:$HOME/.aria2/dht.dat
#zh_Hant#修改 IPv4 DHT 路由表檔案路徑.
#zh_Hant#DHT (IPv4) 檔案 默認:$HOME/.aria2/dht.dat
#en#Change the IPv4 DHT routing table file to PATH.
#en#DHT (IPv4) File Default:$HOME/.aria2/dht.dat
dht-file-path=/config/dht.dat

#zh_Hans#修改 IPv6 DHT 路由表文件路径.
#zh_Hans#DHT (IPv6) 文件 默认:$HOME/.aria2/dht6.dat
#zh_Hant#修改 IPv6 DHT 路由表檔案路徑.
#zh_Hant#DHT (IPv6) 檔案 默認:$HOME/.aria2/dht6.dat
#en#Change the IPv6 DHT routing table file to PATH.
#en#DHT (IPv6) File Default:$HOME/.aria2/dht6.dat
dht-file-path6=/config/dht6.dat

#zh_Hans#指定地址以绑定IPv6的DHT的套接字。
#zh_Hant#指定地址以綁定IPv6的DHT的套接字
#en#Specify address to bind socket for IPv6 DHT.
#dht-listen-addr6=

#zh_Hans#设置 DHT (IPv4, IPv6) 和 UDP 服务器使用的 UCP 端口.
#zh_Hans#多个端口可以使用逗号 "," 分隔, 例如: 6881,6885. 您还可以使用短横线 "-" 表示范围: 6881-6999, 或可以一起使用: 6881-6889, 6999.
#zh_Hans#DHT 监听端口 默认:6881-6999
#zh_Hant#設定 DHT (IPv4, IPv6) 和 UDP 伺服器使用的 UCP 埠.
#zh_Hant#多個埠可以使用逗號 "," 分隔, 例如: 6881,6885. 您還可以使用短橫線 "-" 表示範圍: 6881-6999, 或可以一起使用: 6881-6889, 6999.
#zh_Hant#DHT 監聽埠 默認:6881-6999
#en#Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker.
#en#Multiple ports can be specified by using ,for example: 6881,6885.
#en#You can also use - to specify a range: 6881-6999. , and - can be used together.
#en#DHT Listen Port  Default:6881-6999
dht-listen-port=6881

#zh_Hans#DHT 消息超时时间 默认:10
#zh_Hant#DHT 消息超時時間 默認:10
#en#DHT Message Timeout Default:10
#dht-message-timeout=10

#zh_Hans#启用 IPv4 DHT 功能. 此选项同时会启用 UDP 服务器支持. 如果种子设置为私有, 即使此选项设置为"是", aria2 也不会启用 DHT.
#zh_Hans#启用 DHT (IPv4) [true|false] 默认:true
#zh_Hant#啟用 IPv4 DHT 功能. 此選項同時會啟用 UDP 伺服器支援. 如果種子設定為私有, 即使此選項設定為"是", aria2 也不會啟用 DHT.
#zh_Hant#啟用 DHT (IPv4) [true|false] 默認:true
#en#Enable IPv4 DHT functionality. It also enables UDP tracker support.
#en#If a private flag is set in a torrent, aria2 doesn\'t use DHT for that download even if true is given.
#en#Enable DHT (IPv4) [true|false] Default:true
enable-dht=true

#zh_Hans#启用 IPv6 DHT 功能. 如果种子设置为私有, 即使此选项设置为"是", aria2 也不会启用 DHT. 使用 --dht-listen-port 选项设置监听的端口.
#zh_Hans#启用 DHT (IPv6) [true|false] 默认:false
#zh_Hant#啟用 IPv6 DHT 功能. 如果種子設定為私有, 即使此選項設定為"是", aria2 也不會啟用 DHT. 使用 --dht-listen-port 選項設定監聽的埠.
#zh_Hant#啟用 DHT (IPv6) [true|false] 默認:false
#en#Enable IPv6 DHT functionality. If a private flag is set in a torrent, aria2 doesn\'t use DHT for that download even if true is given.
#en#Use --dht-listen-port option to specify port number to listen on.
#en#Enable DHT (IPv6) [true|false] Default:false
enable-dht6=true

#zh_Hans#启用节点交换扩展. 如果种子设置为私有, 即使此选项设置为"是", aria2 也不会启用此功能.
#zh_Hans#启用节点交换 [true|false] 默认:true
#zh_Hant#啟用節點交換擴充. 如果種子設定為私有, 即使此選項設定為"是", aria2 也不會啟用此功能.
#zh_Hant#啟用節點交換 [true|false] 默認:true
#en#Enable Peer Exchange extension. If a private flag is set in a torrent, this feature is disabled for that download even if true is given.
#en#Enable Peer Exchange [true|false] Default:true
enable-peer-exchange=true

#zh_Hans#如果设置为"是"或"仅内存", 当后缀为 .torrent 或内容类型为 application/x-bittorrent 的文件下载完成时,
#zh_Hans#aria2 将按种子文件读取并下载该文件中提到的文件. 如果设置为"仅内存", 该种子文件将不会写入到磁盘中, 而仅会存储在内存中.
#zh_Hans#如果设置为"否", 则 .torrent 文件会下载到磁盘中, 但不会按种子文件读取并且其中的文件不会进行下载.
#zh_Hans#下载种子中的文件 [true|false|mem] 默认:true
#zh_Hant#如果設定為"是"或"僅記憶體", 當副檔名為 .torrent 或內容類型為 application/x-bittorrent 的檔案下載完成時,
#zh_Hant#aria2 將依種子檔案讀取並下載該檔案中提到的檔案. 如果設定為"僅記憶體", 該種子檔案將不會寫入到磁碟中, 而僅會儲存在記憶體中.
#zh_Hant#如果設定為"否", 則 .torrent 檔案會下載到磁碟中, 但不會依種子檔案讀取並且其中的檔案不會進行下載.
#zh_Hant#下載種子中的檔案 [true|false|mem] 默認:true
#en#If true or mem is specified, when a file whose suffix is .torrent or content type is application/x-bittorrent is downloaded,
#en#aria2 parses it as a torrent file and downloads files mentioned in it.
#en#If mem is specified, a torrent file is not written to the disk, but is just kept in memory.
#en#If false is specified, the .torrent file is downloaded to the disk, but is not parsed as a torrent and its contents are not downloaded.
#en#Follow Torrent [true|false|mem] Default:true
follow-torrent=true

#zh_Hans#为index=INDEX的文件设置文件路径。
#zh_Hant#為index=INDEX的文件設置文件路徑。
#en#Set file path for file with index=INDEX.
#index-out=

#zh_Hans#设置 BT 下载的 TCP 端口. 多个端口可以使用逗号 "," 分隔, 例如: 6881,6885.
#zh_Hans#您还可以使用短横线 "-" 表示范围: 6881-6999, 或可以一起使用: 6881-6889, 6999.
#zh_Hans#监听端口 默认:6881-6999
#zh_Hant#設定 BT 下載的 TCP 埠. 多個埠可以使用逗號 "," 分隔, 例如: 6881,6885.
#zh_Hant#您還可以使用短橫線 "-" 表示範圍: 6881-6999, 或可以一起使用: 6881-6889, 6999.
#zh_Hant#監聽埠 默認:6881-6999
#en#Set TCP port number for BitTorrent downloads. Multiple ports can be specified by using ,for example: 6881,6885.
#en#You can also use - to specify a range: 6881-6999. , and - can be used together: 6881-6889,6999.
#en#Listen Port Default:6881-6999
listen-port=6881

#zh_Hans#设置全局最大上传速度 (字节/秒). 0 表示不限制. 您可以增加数值的单位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hans#全局最大上传速度 默认:0
#zh_Hant#設定全域最大上傳速度 (位元組/秒). 0 表示不限制. 您可以增加數值的單位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hant#全域最大上傳速度 默認:0
#en#Set max overall upload speed in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K).
#en#Global Max Upload Limit Default:0
max-overall-upload-limit=2M

#zh_Hans#设置每个任务的最大上传速度 (字节/秒). 0 表示不限制. 您可以增加数值的单位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hans#最大上传速度 默认:0
#zh_Hant#設定每個工作的最大上傳速度 (位元組/秒). 0 表示不限制. 您可以增加數值的單位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hant#最大上傳速度 默認:0
#en#Set max upload speed per each torrent in bytes/sec. 0 means unrestricted. You can append K or M (1K = 1024, 1M = 1024K).
#en#Max Upload Limit Default:0
max-upload-limit=1M

#zh_Hans#指定节点 ID 的前缀. BT 中节点 ID 长度为 20 字节. 如果超过 20 字节, 将仅使用前 20 字节.
#zh_Hans#如果少于 20 字节, 将在其后不足随机的数据保证为 20 字节.
#zh_Hans#节点 ID 前缀
#zh_Hant#指定節點 ID 的前綴. BT 中節點 ID 長度為 20 位元組. 如果超過 20 位元組, 將僅使用前 20 位元組.
#zh_Hant#如果少於 20 位元組, 將在其後不足隨機的資料保證為 20 位元組.
#zh_Hant#節點 ID 前綴
#en#Specify the prefix of peer ID. The peer ID in BitTorrent is 20 byte length.
#en#If more than 20 bytes are specified, only first 20 bytes are used.
#en#If less than 20 bytes are specified, random byte data are added to make its length 20 bytes.
#en#Peer ID Prefix
peer-id-prefix=-qB5020-

#zh_Hans#指定 BT 扩展握手期间用于节点客户端版本的字符串.
#zh_Hans#Peer Agent
#zh_Hant#指定 BT 擴充握手期間用於節點客戶端版本的字串.
#zh_Hant#Peer Agent
#en#Specify the string used during the bitorrent extended handshake for the peer’s client version.
#en#Peer Agent
peer-agent=qBittorrent/5.0.2

#zh_Hans#自定义 User Agent 默认:aria2/$VERSION
#zh_Hant#自訂 User Agent 默認:aria2/$VERSION
#en#Custom User Agent Default:aria2/$VERSION
user-agent=qBittorrent/5.0.2

#zh_Hans#指定分享率. 当分享率达到此选项设置的值时会完成做种. 强烈建议您将此选项设置为大于等于 1.0.
#zh_Hans#如果您想不限制分享比率, 可以设置为 0.0. 如果同时设置了 --seed-time 选项, 当任意一个条件满足时将停止做种.
#zh_Hans#最小分享率 默认:1.0
#zh_Hant#指定分享率. 當分享率達到此選項設定的值時會完成做種. 強烈建議您將此選項設定為大於等於 1.0.
#zh_Hant#如果您想不限制分享比率, 可以設定為 0.0. 如果同時設定了 --seed-time 選項, 當任意一個條件滿足時將停止做種.
#zh_Hant#最小分享率 默認:1.0
#en#Specify share ratio. Seed completed torrents until share ratio reaches RATIO.
#en#You are strongly encouraged to specify equals or more than 1.0 here.
#en#Specify 0.0 if you intend to do seeding regardless of share ratio.
#en#If --seed-time option is specified along with this option, seeding ends when at least one of the conditions is satisfied.
#en#Min Share Ratio Default:1.0
seed-ratio=1.0

#zh_Hans#以 (小数形式的) 分钟指定做种时间. 此选项设置为 0 时, 将在 BT 任务下载完成后不进行做种.
#zh_Hans#最小做种时间
#zh_Hant#以 (小數形式的) 分鐘指定做種時間. 此選項設置爲 0 時, 將在 BT 任務下載完成後不進行做種.
#zh_Hant#最小做種時間
#en#Specify seeding time in (fractional) minutes. Specifying --seed-time=0 disables seeding after download completed.
#en#Min Seed Time
seed-time=0


#zh_Hans#Metalink 设置
#zh_Hant#Metalink 設定
#en#Metalink Settings

#zh_Hans#如果设置为"是"或"仅内存", 当后缀为 .meta4 或 .metalink 或内容类型为
#zh_Hans#application/metalink4+xml 或 application/metalink+xml 的文件下载完成时, aria2 将按 Metalink 文件读取并下载该文件中提到的文件.
#zh_Hans#如果设置为"仅内存", 该 Metalink 文件将不会写入到磁盘中, 而仅会存储在内存中.
#zh_Hans#如果设置为"否", 则 .metalink 文件会下载到磁盘中, 但不会按 Metalink 文件读取并且其中的文件不会进行下载.
#zh_Hans#下载 Metalink 中的文件 [true|false|mem] 默认:true
#zh_Hant#如果設定為"是"或"僅記憶體", 當副檔名為 .meta4 或 .metalink 或內容類型為
#zh_Hant#application/metalink4+xml 或 application/metalink+xml 的檔案下載完成時, aria2 將依 Metalink 檔案讀取並下載該檔案中提到的檔案.
#zh_Hant#如果設定為"僅記憶體", 該 Metalink 檔案將不會寫入到磁碟中, 而僅會儲存在記憶體中.
#zh_Hant#如果設定為"否", 則 .metalink 檔案會下載到磁碟中, 但不會依 Metalink 檔案讀取並且其中的檔案不會進行下載.
#zh_Hant#下載 Metalink 中的檔案 [true|false|mem] 默認:true
#en#If true or mem is specified, when a file whose suffix is .meta4 or .metalink or content type of
#en#application/metalink4+xml or application/metalink+xml is downloaded, aria2 parses it as a metalink file and downloads files mentioned in it.
#en#If mem is specified, a metalink file is not written to the disk, but is just kept in memory.
#en#If false is specified, the .metalink file is downloaded to the disk, but is not parsed as a metalink file and its contents are not downloaded.
#en#Follow Metalink [true|false|mem] Default:true
#follow-metalink=true

#zh_Hans#指定基础 URI 以便解析本地磁盘中存储的 Metalink 文件里 metalink:url 和 metalink:metaurl 中的相对 URI 地址.
#zh_Hans#如果 URI 表示的为目录, 最后需要以 / 结尾.
#zh_Hans#基础 URI
#zh_Hant#指定基礎 URI 以便解析本機磁碟中儲存的 Metalink 檔案裡 metalink:url 和 metalink:metaurl 中的相對 URI 位址.
#zh_Hant#如果 URI 表示的為目錄, 最後需要以 / 結尾.
#zh_Hant#基礎 URI
#en#Specify base URI to resolve relative URI in metalink:url and metalink:metaurl element in a metalink file stored in local disk.
#en#If URI points to a directory, URI must end with /.
#en#Base URI
#metalink-base-uri=

#zh_Hans#语言
#zh_Hant#語言
#en#Language
#metalink-language=

#zh_Hans#首选服务器所在的位置. 可以使用逗号分隔的列表, 例如: jp,us.
#zh_Hans#首选服务器位置
#zh_Hant#首選伺服器所在的位置. 可以使用逗號分隔的清單, 例如: jp,us.
#zh_Hant#首選伺服器位置
#en#The location of the preferred server. A comma-delimited list of locations is acceptable, for example, jp,us.
#en#Preferred Server Location
#metalink-location=

#zh_Hans#下载文件的操作系统.
#zh_Hans#操作系统
#zh_Hant#下載檔案的操作系統.
#zh_Hant#操作系統
#en#The operating system of the file to download.
#en#Operation System
#metalink-os=

#zh_Hans#下载文件的版本号.
#zh_Hans#版本号
#zh_Hant#下載檔案的版本號.
#zh_Hant#版本號
#en#The version of the file to download.
#en#Version
#metalink-version=

#zh_Hans#指定首选使用的协议. 可以设置为 http, https, ftp 或"无". 设置为"无"时禁用此选项.
#zh_Hans#首选使用协议 [http|https|ftp|none] 默认:none
#zh_Hant#指定首選使用的協定. 可以設定為 http, https, ftp 或"無". 設定為"無"時停用此選項.
#zh_Hant#首選使用協定 [http|https|ftp|none] 默認:none
#en#Specify preferred protocol. The possible values are http, https, ftp and none. Specify none to disable this feature.
#en#Preferred Protocol [http|https|ftp|none] Default:none
#metalink-preferred-protocol=none

#zh_Hans#如果一个 Metalink 文件可用多种协议, 并且此选项设置为"是", aria2 将只会使用其中一种.
#zh_Hans#使用 --metalink-preferred-protocol 参数指定首选的协议.
#zh_Hans#仅使用唯一协议 [true|false] 默认:true
#zh_Hant#如果一個 Metalink 檔案可用多種協定, 並且此選項設定為"是", aria2 將只會使用其中一種.
#zh_Hant#使用 --metalink-preferred-protocol 參數指定首選的協定.
#zh_Hant#僅使用唯一協定 [true|false] 默認:true
#en#If true is given and several protocols are available for a mirror in a metalink file, aria2 uses one of them.
#en#Use --metalink-preferred-protocol option to specify the preference of protocol.
#en#Enable Unique Protocol [true|false] Default:true
#metalink-enable-unique-protocol=true


#zh_Hans#RPC 设置
#zh_Hant#RPC 設定
#en#RPC Settings

#zh_Hans#启用 JSON-RPC/XML-RPC 服务器 [true|false] 默认:false
#zh_Hant#啟用 JSON-RPC/XML-RPC 伺服器 [true|false] 默認:false
#en#Enable JSON-RPC/XML-RPC Server [true|false] Default:false
enable-rpc=true

#zh_Hans#当种子文件下载完成后暂停后续的下载. 在 aria2 中有 3 种种子文件的下载类型: (1) 下载 .torrent 文件. (2) 通过磁链下载的种子文件.
#zh_Hans#(3) 下载 Metalink 文件. 这些种子文件下载完后会根据文件内容继续进行下载. 此选项会暂停这些后续的下载. 此选项仅当 --enable-rpc 选项启用时生效.
#zh_Hans#种子文件下载完后暂停 [true|false] 默认:false
#zh_Hant#當種子檔案下載完成後暫停後續的下載. 在 aria2 中有 3 種種子檔案的下載類型: (1) 下載 .torrent 檔案. (2) 通過磁力連結下載的種子檔案.
#zh_Hant#(3) 下載 Metalink 檔案. 這些種子檔案下載完後會根據檔案內容繼續進行下載. 此選項會暫停這些後續的下載. 此選項僅當 --enable-rpc 選項啟用時生效.
#zh_Hant#種子檔案下載完後暫停 [true|false] 默認:false
#en#Pause downloads created as a result of metadata download. There are 3 types of metadata downloads in aria2:
#en#(1) downloading .torrent file. (2) downloading torrent metadata using magnet link. (3) downloading metalink file.
#en#These metadata downloads will generate downloads using their metadata. This option pauses these subsequent downloads.
#en#This option is effective only when --enable-rpc=true is given.
#en#Pause After Metadata Downloaded [true|false] Default:false
pause-metadata=false

#zh_Hans#在 RPC 响应头增加 Access-Control-Allow-Origin 字段, 值为 * .
#zh_Hans#接受所有远程请求 [true|false] 默认:false
#zh_Hant#在 RPC 響應頭增加 Access-Control-Allow-Origin 欄位, 值為 * .
#zh_Hant#接受所有遠端要求 [true|false] 默認:false
#en#Add Access-Control-Allow-Origin header field with value * to the RPC response.
#en#Allow All Origin Request [true|false] Default:false
rpc-allow-origin-all=true

#zh_Hans#将指定的证书用于RPC服务器。证书必须采用PKCS12（.p12、.pfx）或PEM格式。
#zh_Hant#將指定的證書用於RPC服務器。證書必須采用PKCS12（.p12、.pfx）或PEM格式。
#en#Use the certificate in FILE for RPC server. The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format.
#rpc-certificate=

#zh_Hans#在所有网络适配器上监听 JSON-RPC/XML-RPC 的请求, 如果设置为"否", 仅监听本地网络的请求.
#zh_Hans#在所有网卡上监听 [true|false] 默认:false
#zh_Hant#在所有網路適配器上監聽 JSON-RPC/XML-RPC 的要求, 如果設定為"否", 僅監聽本機網路的要求.
#zh_Hant#在所有網卡上監聽 [true|false] 默認:false
#en#Listen incoming JSON-RPC/XML-RPC requests on all network interfaces.
#en#If false is given, listen only on local loopback interface.
#en#Listen on All Network Interfaces [true|false] Default:false
rpc-listen-all=true

#zh_Hans#监听端口 值:1024-65535 默认:6800
#zh_Hant#監聽埠 值:1024-65535 默認:6800
#en#Listen Port Values:1024-65535 Default:6800
rpc-listen-port=6800

#zh_Hans#设置 JSON-RPC/XML-RPC 最大的请求大小. 如果 aria2 检测到请求超过设定的字节数, 会直接取消连接.
#zh_Hans#最大请求大小 默认:2M
#zh_Hant#設定 JSON-RPC/XML-RPC 最大的要求大小. 如果 aria2 檢測到要求超過設定的位元組數, 會直接取消連線.
#zh_Hant#最大要求大小 默認:2M
#en#Set max size of JSON-RPC/XML-RPC request. If aria2 detects the request is more than SIZE bytes, it drops connection.
#en#Max Request Size Default:2M
rpc-max-request-size=2M

#zh_Hans#将指定的私钥用于RPC服务器。私钥必须解密并采用PEM格式。
#zh_Hant#將指定的私鑰用於RPC服務器。私鑰必須解密並采用PEM格式。
#en#Use the private key in FILE for RPC server. The private key must be decrypted and in PEM format.
#rpc-private-key=

#zh_Hans#在 dir 选项设置的目录中保存上传的种子文件或 Metalink 文件. 文件名包括 SHA-1 哈希后的元数据和扩展名两部分.
#zh_Hans#对于种子文件, 扩展名为 '.torrent'. 对于 Metalink 为 '.meta4'.
#zh_Hans#如果此选项设置为"否", 通过 aria2.addTorrent() 或 aria2.addMetalink() 方法添加的下载将无法通过 --save-session 选项保存.
#zh_Hans#保存上传的种子文件 [true|false] 默认:true
#zh_Hant#在 dir 選項設定的目錄中儲存上傳的種子檔案或 Metalink 檔案. 檔名包括 SHA-1 雜湊後的中繼資料和副檔名兩部分.
#zh_Hant#對於種子檔案, 副檔名為 '.torrent'. 對於 Metalink 為 '.meta4'.
#zh_Hant#如果此選項設定為"否", 通過 aria2.addTorrent() 或 aria2.addMetalink() 方法加入的下載將無法通過 --save-session 選項儲存.
#zh_Hant#儲存上傳的種子檔案 [true|false] 默認:true
#en#Save the uploaded torrent or metalink meta data in the directory specified by --dir option.
#en#The file name consists of SHA-1 hash hex string of meta data plus extension.
#en#For torrent, the extension is \'.torrent\'. For metalink, it is \'.meta4\'.
#en#If false is given to this option, the downloads added by aria2.addTorrent() or aria2.addMetalink() will not be saved by --save-session option.
#en#Save Upload Metadata [true|false] Default:true
rpc-save-upload-metadata=true

#zh_Hans#设置RPC秘密授权令牌。
#zh_Hant#設置RPC秘密授權令牌。
#en#Set RPC secret authorization token.
rpc-secret=

#zh_Hans#RPC 将通过 SSL/TLS 加密传输. RPC 客户端需要使用 https 协议连接服务器.
#zh_Hans#对于 WebSocket 客户端, 使用 wss 协议. 使用 --rpc-certificate 和 --rpc-private-key 选项设置服务器的证书和私钥.
#zh_Hans#启用 SSL/TLS [true|false] 默认:false
#zh_Hant#RPC 將通過 SSL/TLS 加密傳輸. RPC 客戶端需要使用 https 協定連線伺服器.
#zh_Hant#對於 WebSocket 客戶端, 使用 wss 協定. 使用 --rpc-certificate 和 --rpc-private-key 選項設定伺服器的證書和私鑰.
#zh_Hant#啟用 SSL/TLS [true|false] 默認:false
#en#RPC transport will be encrypted by SSL/TLS. The RPC clients must use https scheme to access the server.
#en#For WebSocket client, use wss scheme. Use --rpc-certificate and --rpc-private-key options to specify the server certificate and private key.
#en#Enable SSL/TLS [true|false] Default:false
rpc-secure=false


#zh_Hans#高级设置
#zh_Hant#進階設定
#en#Advanced Settings

#zh_Hans#如果相应的控制文件不存在时从头重新下载文件. 参见 --auto-file-renaming 选项.
#zh_Hans#允许覆盖 [true|false] 默认:false
#zh_Hant#如果相應的控制檔案不存在時從頭重新下載檔案. 參見 --auto-file-renaming 選項.
#zh_Hant#允許覆蓋 [true|false] 默認:false
#en#Restart download from scratch if the corresponding control file doesn\'t exist. See also --auto-file-renaming option.
#en#Allow Overwrite [true|false] Default:false
allow-overwrite=false

#zh_Hans#如果设置为"否", 当分片长度与控制文件中的不同时, aria2 将会中止下载. 如果设置为"是", 您可以继续, 但部分下载进度将会丢失.
#zh_Hans#允许分片大小变化 [true|false] 默认:false
#zh_Hant#如果設定為"否", 當分段長度與控制檔案中的不同時, aria2 將會中止下載. 如果設定為"是", 您可以繼續, 但部分下載進度將會丟失.
#zh_Hant#允許分段大小變化 [true|false] 默認:false
#en#If false is given, aria2 aborts download when a piece length is different from one in a control file.
#en#If true is given, you can proceed but some download progress will be lost.
#en#Allow Piece Length Change [true|false] Default:false
allow-piece-length-change=true

#zh_Hans#始终断点续传. 如果设置为"是", aria2 始终尝试断点续传, 如果无法恢复, 则中止下载.
#zh_Hans#如果设置为"否", 对于不支持断点续传的 URI 或 aria2 遇到 N 个不支持断点续传的 URI
#zh_Hans#(N 为 --max-resume-failure-tries 选项设置的值), aria2 会从头下载文件. 参见 --max-resume-failure-tries 参数.
#zh_Hans#始终断点续传 [true|false] 默认:true
#zh_Hant#始終斷點續傳. 如果設定為"是", aria2 始終嘗試斷點續傳, 如果無法恢復, 則中止下載.
#zh_Hant#如果設定為"否", 對於不支援斷點續傳的 URI 或 aria2 遇到 N 個不支援斷點續傳的 URI
#zh_Hant#(N 為 --max-resume-failure-tries 選項設定的值), aria2 會從頭下載檔案. 參見 --max-resume-failure-tries 參數.
#zh_Hant#始終斷點續傳 [true|false] 默認:true
#en#Always resume download. If true is given,
#en#aria2 always tries to resume download and if resume is not possible, aborts download.
#en#If false is given, when all given URIs do not support resume or aria2 encounters N URIs which does not support resume
#en#(N is the value specified using --max-resume-failure-tries option), aria2 downloads file from scratch. See --max-resume-failure-tries option.
#en#Always Resume Download [true|false] Default:true
always-resume=true

#zh_Hans#异步 DNS [true|false] 默认:true
#zh_Hant#非同步 DNS [true|false] 默認:true
#en#Asynchronous DNS [true|false] Default:true
#async-dns=true

#zh_Hant#指定异步 DNS 服务器列表，未指定则从 /etc/resolv.conf 中读取。
#zh_Hant#异步 DNS 服务器列表
#zh_Hant#指定異步 DNS 服務器列表，未指定則從 /etc/resolv.conf 中讀取。
#zh_Hant#異步 DNS 服務器列表
#en#Comma separated list of DNS server address used in asynchronous DNS resolver.
#en#Usually asynchronous DNS resolver reads DNS server addresses from ``/etc/resolv.conf``.
#en#list of asynchronous DNS resolver
#async-dns-server=

#zh_Hans#重新命名已经存在的文件. 此选项仅对 HTTP(S)/FTP 下载有效. 新的文件名后会在文件名后、扩展名 (如果有) 前追加句点和数字(1..9999).
#zh_Hans#文件自动重命名 [true|false] 默认:true
#zh_Hant#重新命名已經存在的檔案. 此選項僅對 HTTP(S)/FTP 下載有效. 新的檔名後會在檔名後、副檔名 (如果有) 前追加句點和數字(1..9999).
#zh_Hant#檔案自動重命名 [true|false] 默認:true
#en#Rename file name if the same file already exists. This option works only in HTTP(S)/FTP download.
#en#The new file name has a dot and a number(1..9999) appended after the name, but before the file extension, if any.
#en#Auto File Renaming [true|false] Default:true
auto-file-renaming=true

#zh_Hans#每隔设置的秒数自动保存控制文件(*.aria2). 如果设置为 0, 下载期间控制文件不会自动保存.
#zh_Hans#不论设置的值为多少, aria2 会在任务结束时保存控制文件. 可以设置的值为 0 到 600.
#zh_Hans#自动保存间隔 默认:60
#zh_Hant#每隔設定的秒數自動儲存控制檔案(*.aria2). 如果設定為 0, 下載期間控制檔案不會自動儲存.
#zh_Hant#不論設定的值為多少, aria2 會在工作結束時儲存控制檔案. 可以設定的值為 0 到 600.
#zh_Hant#自動儲存間隔 默認:60
#en#Save a control file(*.aria2) every SEC seconds.
#en#If 0 is given, a control file is not saved during download.
#en#aria2 saves a control file when it stops regardless of the value. The possible values are between 0 to 600.
#en#Auto Save Interval Default:60
auto-save-interval=30

#zh_Hans#仅当本地文件比远程文件旧时才进行下载. 此功能仅适用于 HTTP(S) 下载.
#zh_Hans#如果在 Metalink 中文件大小已经被指定则功能无法生效. 同时此功能还将忽略 Content-Disposition 响应头.
#zh_Hans#如果存在控制文件, 此选项将被忽略. 此功能通过 If-Modified-Since 请求头获取较新的文件.
#zh_Hans#当获取到本地文件的修改时间时, 此功能将使用用户提供的文件名 (参见 --out 选项), 如果没有指定 --out 选项则使用 URI 中的文件名.
#zh_Hans#为了覆盖已经存在的文件, 需要使用 --allow-overwrite 参数.
#zh_Hans#条件下载 [true|false] 默认:false
#zh_Hant#僅當本機檔案比遠端檔案舊時才進行下載. 此功能僅適用於 HTTP(S) 下載.
#zh_Hant#如果在 Metalink 中檔案大小已經被指定則功能無法生效. 同時此功能還將忽略 Content-Disposition 響應頭.
#zh_Hant#如果存在控制檔案, 此選項將被忽略. 此功能通過 If-Modified-Since 要求標頭獲取較新的檔案.
#zh_Hant#當獲取到本機檔案的修改時間時, 此功能將使用使用者提供的檔名 (參見 --out 選項), 如果沒有指定 --out 選項則使用 URI 中的檔名.
#zh_Hant#為了覆蓋已經存在的檔案, 需要使用 --allow-overwrite 參數.
#zh_Hant#條件下載 [true|false] 默認:false
#en#Download file only when the local file is older than remote file.
#en#This function only works with HTTP(S) downloads only. It does not work if file size is specified in Metalink.
#en#It also ignores Content-Disposition header. If a control file exists, this option will be ignored.
#en#This function uses If-Modified-Since header to get only newer file conditionally.
#en#When getting modification time of local file, it uses user supplied file name (see --out option)
#en#or file name part in URI if --out is not specified. To overwrite existing file, --allow-overwrite is required.
#en#Conditional Download [true|false] Default:false
#conditional-get=false

#zh_Hans#配置文件路径 默认:$HOME/.aria2/aria2.conf
#zh_Hant#設定檔案路徑 默認:$HOME/.aria2/aria2.conf
#en#Configuration File Default:$HOME/.aria2/aria2.conf
#conf-path=/config/aria2.conf

#zh_Hans#控制台日志级别 [debug|info|notice|warn|error] 默认:notice
#zh_Hant#控制台記錄層級 [debug|info|notice|warn|error] 默認:notice
#en#Console Log Level [debug|info|notice|warn|error] Default:notice
console-log-level=notice

#zh_Hans#处理 "Content-Disposition" 头中的字符串时使用 UTF-8 字符集来代替 ISO-8859-1, 例如, 文件名参数, 但不是扩展版本的文件名.
#zh_Hans#使用 UTF-8 处理 Content-Disposition [true|false] 默认:false
#zh_Hant#處理 "Content-Disposition" 頭中的字串時使用 UTF-8 字集來代替 ISO-8859-1, 例如, 檔名參數, 但不是擴充版本的檔名.
#zh_Hant#使用 UTF-8 處理 Content-Disposition [true|false] 默認:false
#en#Handle quoted string in Content-Disposition header as UTF-8 instead of ISO-8859-1,
#en#for example, the filename parameter, but not the extended version filename.
#en#Use UTF-8 to Handle Content-Disposition [true|false] Default:false
content-disposition-default-utf8=true

#zh_Hans#启用后台进程 [true|false] 默认:false
#zh_Hant#啟用背景處理程序 [true|false] 默認:false
#en#Enable Daemon [true|false] Default:false
daemon=false

#zh_Hans#如果设置为"是", aria2 在启动时不会读取 --input-file 选项设置的文件中的所有 URI 地址, 而是会在之后需要时按需读取.
#zh_Hans#如果输入文件中包含大量要下载的 URI, 此选项可以减少内存的使用. 如果设置为"否", aria2 会在启动时读取所有的 URI.
#zh_Hans#当 -save-session 使用时将会禁用 --deferred-input 选项.
#zh_Hans#延迟加载 [true|false] 默认:false
#zh_Hant#如果設定為"是", aria2 在啟動時不會讀取 --input-file 選項設定的檔案中的所有 URI 位址, 而是會在之後需要時依需讀取.
#zh_Hant#如果輸入檔案中包含大量要下載的 URI, 此選項可以減少記憶體的使用. 如果設定為"否", aria2 會在啟動時讀取所有的 URI.
#zh_Hant#當 -save-session 使用時將會停用 --deferred-input 選項.
#zh_Hant#延遲載入 [true|false] 默認:false
#en#If true is given, aria2 does not read all URIs and options from file specified by --input-file option at startup,
#en#but it reads one by one when it needs later. This may reduce memory usage if input file contains a lot of URIs to download.
#en#If false is given, aria2 reads all URIs and options at startup. --deferred-input option will be disabled when --save-session is used together.
#en#Deferred Load [true|false] Default:false
#deferred-input=false

#zh_Hans#禁用 IPv6 [true|false] 默认:false
#zh_Hant#停用 IPv6 [true|false] 默認:false
#en#Disable IPv6 [true|false] Default:false
disable-ipv6=false

#zh_Hans#启用磁盘缓存. 如果设置为 0, 将禁用磁盘缓存. 此功能将下载的数据缓存在内存中, 最多占用此选项设置的字节数.
#zh_Hans# 缓存存储由 aria2 实例创建并对所有下载共享. 由于数据以较大的单位写入并按文件的偏移重新排序, 所以磁盘缓存的一个优点是减少磁盘的 I/O.
#zh_Hans#如果调用哈希检查时并且数据缓存在内存中时, 将不需要从磁盘中读取. 大小可以包含 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hans#磁盘缓存 默认:16M
#zh_Hant#啟用磁碟快取. 如果設定為 0, 將停用磁碟快取. 此功能將下載的資料快取在記憶體中, 最多佔用此選項設定的位元組數.
#zh_Hant#快取儲存由 aria2 實例建立並對所有下載共享. 由於資料以較大的單位寫入並依檔案的偏移重新排序, 所以磁碟快取的一個優點是減少磁碟的 I/O.
#zh_Hant#如果調用雜湊檢查時並且資料快取在記憶體中時, 將不需要從磁碟中讀取. 大小可以包含 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hant#磁碟快取 默認:16M
#en#Enable disk cache. If SIZE is 0, the disk cache is disabled.
#en#This feature caches the downloaded data in memory, which grows to at most SIZE bytes.
#en#The cache storage is created for aria2 instance and shared by all downloads.
#en#The one advantage of the disk cache is reduce the disk I/O because the data are written in larger unit and it is reordered by the offset of the file.
#en#If hash checking is involved and the data are cached in memory, we don\'t need to read them from the disk.
#en#SIZE can include K or M (1K = 1024, 1M = 1024K).
#en#Disk Cache Default:16M
disk-cache=32M

#zh_Hans#此选项将修改下载结果的格式. 如果设置为"默认", 将打印 GID, 状态, 平均下载速度和路径/URI.
#zh_Hans#如果涉及多个文件, 仅打印第一个请求文件的路径/URI, 其余的将被忽略.
#zh_Hans#如果设置为"完整", 将打印 GID, 状态, 平均下载速度, 下载进度和路径/URI. 其中, 下载进度和路径/URI 将会每个文件打印一行.
#zh_Hans#如果设置为"隐藏", 下载结果将会隐藏.
#zh_Hans#下载结果 [true|false] 默认:false
#zh_Hant#此選項將修改下載結果的格式. 如果設定為"預設", 將列印 GID, 狀態, 平均下載速度和路徑/URI.
#zh_Hant#如果涉及多個檔案, 僅列印第一個要求檔案的路徑/URI, 其餘的將被忽略.
#zh_Hant#如果設定為"完整", 將列印 GID, 狀態, 平均下載速度, 下載進度和路徑/URI. 其中, 下載進度和路徑/URI 將會每個檔案列印一行.
#zh_Hant#如果設定為"隱藏", 下載結果將會隱藏.
#zh_Hant#下載結果 [true|false] 默認:false
#en#This option changes the way Download Results is formatted.
#en#If OPT is default, print GID, status, average download speed and path/URI.
#en#If multiple files are involved, path/URI of first requested file is printed and remaining ones are omitted.
#en#If OPT is full, print GID, status, average download speed, percentage of progress and path/URI.
#en#The percentage of progress and path/URI are printed for each requested file in each row. If OPT is hide, Download Results is hidden.
#en#Download Result [true|false] Default:false
#download-result=false

#zh_Hans#为 QoS 设置 BT 上行 IP 包的 DSCP 值. 此参数仅设置 IP 包中 TOS 字段的 DSCP 位, 而不是整个字段.
#zh_Hans#如果您从 /usr/include/netinet/ip.h 得到的值, 需要除以 4 (否则值将不正确, 例如您的 CS1 类将会转为 CS4).
#zh_Hans#如果您从 RFC, 网络供应商的文档, 维基百科或其他来源采取常用的值, 可以直接使用.
#zh_Hans#DSCP
#zh_Hant#為 QoS 設定 BT 上行 IP 包的 DSCP 值. 此參數僅設定 IP 包中 TOS 欄位的 DSCP 位, 而不是整個欄位.
#zh_Hant#如果您從 /usr/include/netinet/ip.h 得到的值, 需要除以 4 (否則值將不正確, 例如您的 CS1 類將會轉為 CS4).
#zh_Hant#如果您從 RFC, 網路供應商的文件, 維基百科或其他來源採取常用的值, 可以直接使用.
#zh_Hant#DSCP
#en#Set DSCP value in outgoing IP packets of BitTorrent traffic for QoS.
#en#This parameter sets only DSCP bits in TOS field of IP packets, not the whole field.
#en#If you take values from /usr/include/netinet/ip.h divide them by 4 (otherwise values would be incorrect,
#en#e.g. your CS1 class would turn into CS4). If you take commonly used values from RFC,
#en#network vendors\' documentation, Wikipedia or any other source, use them as they are.
#en#DSCP
#dscp=

#zh_Hans#设置打开的文件描述符的软限制 (soft limit).
#zh_Hans#此选项仅当满足如下条件时开放: a. 系统支持它 (posix). b. 限制没有超过硬限制 (hard limit). c. 指定的限制比当前的软限制高.
#zh_Hans#这相当于设置 ulimit, 除了其不能降低限制. 此选项仅当系统支持 rlimit API 时有效.
#zh_Hans#最多打开的文件描述符
#zh_Hant#設定打開的檔案描述項的軟限制 (soft limit).
#zh_Hant#此選項僅當滿足如下條件時開放: a. 系統支援它 (posix). b. 限制沒有超過硬限制 (hard limit). c. 指定的限制比目前的軟限制高.
#zh_Hant#這相當於設定 ulimit, 除了其不能降低限制. 此選項僅當系統支援 rlimit API 時有效.
#zh_Hant#最多打開的檔案描述項
#en#Set the soft limit of open file descriptors. This open will only have effect when: a.
#en#The system supports it (posix). b. The limit does not exceed the hard limit. c. The specified limit is larger
#en#than the current soft limit. This is equivalent to setting nofile via ulimit, except that it will never decrease the limit.
#en#This option is only available on systems supporting the rlimit API.
#en#Soft Limit of Open File Descriptors
#rlimit-nofile=

#zh_Hans#终端输出使用颜色 [true|false] 默认:true
#zh_Hant#終端輸出使用顏色 [true|false] 默認:true
#en#Enable Color in Terminal [true|false] Default:true
#enable-color=true

#zh_Hans#内存中存放映射文件. 当文件空间没有预先分配至, 此选项无效. 参见 --file-allocation.
#zh_Hans#启用 MMap [true|false] 默认:false
#zh_Hant#記憶體中存放映射檔案. 當檔案空間沒有預先分配至, 此選項無效. 參見 --file-allocation.
#zh_Hant#啟用 MMap [true|false] 默認:false
#en#Map files into memory. This option may not work if the file space is not pre-allocated. See --file-allocation.
#en#Enable MMap [true|false] Default:false
#enable-mmap=false

#zh_Hans#设置事件轮询的方法. 可选的值包括 epoll, kqueue, port, poll 和 select.
#zh_Hans#对于 epoll, kqueue, port 和 poll, 只有系统支持时才可用. 最新的 Linux 支持 epoll.
#zh_Hans#各种 *BSD 系统包括 Mac OS X 支持 kqueue. Open Solaris 支持 port. 默认值根据您使用的操作系统不同而不同.
#zh_Hans#事件轮询方法 [epoll|kqueue|port|poll|select]
#zh_Hant#設定事件輪詢的方法. 可選的值包括 epoll, kqueue, port, poll 和 select.
#zh_Hant#對於 epoll, kqueue, port 和 poll, 只有系統支援時才可用. 最新的 Linux 支援 epoll.
#zh_Hant#各種 *BSD 系統包括 Mac OS X 支援 kqueue. Open Solaris 支援 port. 預設值根據您使用的操作系統不同而不同.
#zh_Hant#事件輪詢方法 [epoll|kqueue|port|poll|select]
#en#Specify the method for polling events. The possible values are epoll, kqueue, port, poll and select.
#en#For each epoll, kqueue, port and poll, it is available if system supports it. epoll is available on recent Linux.
#en#kqueue is available on various *BSD systems including Mac OS X. port is available on Open Solaris.
#en#The default value may vary depending on the system you use.
#en#Event Polling Method [epoll|kqueue|port|poll|select]
#event-poll=select

#zh_Hans#指定文件分配方法. "无" 不会预先分配文件空间. "prealloc"会在下载开始前预先分配空间.
#zh_Hans#这将会根据文件的大小需要一定的时间. 如果您使用的是较新的文件系统, 例如 ext4 (带扩展支持), btrfs, xfs 或 NTFS (仅 MinGW 构建),
#zh_Hans#"falloc" 是最好的选择. 其几乎可以瞬间分配大(数 GiB)文件.
#zh_Hans#不要在旧的文件系统, 例如 ext3 和 FAT32 上使用 falloc, 因为与 prealloc 花费的时间相同, 并且其会阻塞 aria2 知道分配完成.
#zh_Hans#当您的系统不支持 posix_fallocate(3) 函数时, falloc 可能无法使用.
#zh_Hans#"trunc" 使用 ftruncate(2) 系统调用或平台特定的实现将文件截取到特定的长度.
#zh_Hans#在多文件的 BitTorrent 下载中, 若某文件与其相邻的文件共享相同的分片时, 则相邻的文件也会被分配.
#zh_Hans#文件分配方法 [none|prealloc|trunc|falloc] 默认:prealloc
#zh_Hant#指定檔案分配方法. "無" 不會預先分配檔案空間. "prealloc"會在下載開始前預先分配空間.
#zh_Hant#這將會根據檔案的大小需要一定的時間. 如果您使用的是較新的檔案系統, 例如 ext4 (帶擴充支援), btrfs, xfs 或 NTFS (僅 MinGW 組建),
#zh_Hant#"falloc" 是最好的選擇. 其幾乎可以瞬間分配大(數 GiB)檔案.
#zh_Hant#不要在舊的檔案系統, 例如 ext3 和 FAT32 上使用 falloc, 因為與 prealloc 花費的時間相同, 並且其會阻塞 aria2 知道分配完成.
#zh_Hant#當您的系統不支援 posix_fallocate(3) 函數時, falloc 可能無法使用.
#zh_Hant#"trunc" 使用 ftruncate(2) 系統調用或平台特定的實現將檔案截取到特定的長度.
#zh_Hant#在多檔案的 BitTorrent 下載中, 若某檔案與其相鄰的檔案共享相同的分段時, 則相鄰的檔案也會被分配.
#zh_Hant#檔案分配方法 [none|prealloc|trunc|falloc] 默認:prealloc
#en#Specify file allocation method. none doesn\'t pre-allocate file space.
#en#prealloc pre-allocates file space before download begins. This may take some time depending on the size of the file.
#en#If you are using newer file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc is your best choice.
#en#It allocates large(few GiB) files almost instantly. Don\'t use falloc with legacy file systems such as ext3 and FAT32 because
#en#it takes almost same time as prealloc and it blocks aria2 entirely until allocation finishes.
#en#falloc may not be available if your system doesn\'t have posix_fallocate(3) function. trunc uses ftruncate(2) system
#en#call or platform-specific counterpart to truncate a file to a specified length.
#en#In multi file torrent downloads, the files adjacent forward to the specified files are also allocated if they share the same piece.
#en#File Allocation Method [none|prealloc|trunc|falloc] Default:prealloc
file-allocation=none

#zh_Hans#即使任务完成或删除时使用 --save-session 选项时也保存该任务.
#zh_Hans#此选项在这种情况下还会保存控制文件. 此选项可以保存被认为已经完成但正在做种的 BT 任务.
#zh_Hans#强制保存 [true|false] 默认:false
#zh_Hant#即使工作完成或刪除時使用 --save-session 選項時也儲存該工作.
#zh_Hant#此選項在這種情況下還會儲存控制檔案. 此選項可以儲存被認為已經完成但正在做種的 BT 工作.
#zh_Hant#強制儲存 [true|false] 默認:false
#en#Save download with --save-session option even if the download is completed or removed.
#en#This option also saves control file in that situations.
#en#This may be useful to save BitTorrent seeding which is recognized as completed state.
#en#Force Save [true|false] Default:false
force-save=false

#zh_Hans#当使用 --save-session 选项时, 即使当任务中的文件不存在时也保存该下载任务. 此选项同时会将这种情况保存到控制文件中.
#zh_Hans#保存未找到的文件 [true|false] 默认:true
#zh_Hant#當使用 --save-session 選項時, 即使當工作中的檔案不存在時也儲存該下載工作. 此選項同時會將這種情況儲存到控制檔案中.
#zh_Hant#儲存未找到的檔案 [true|false] 默認:true
#en#Save download with --save-session option even if the file was not found on the server.
#en#This option also saves control file in that situations.
#en#Save Not Found File [true|false] Default:true
#save-not-found=true

#zh_Hans#如果设置为"是", 哈希检查完使用 --check-integrity 选项, 根据是否下载完成决定是否终止下载.
#zh_Hans#仅哈希检查 [true|false] 默认:false
#zh_Hant#如果設定為"是", 雜湊檢查完使用 --check-integrity 選項, 根據是否下載完成決定是否終止下載.
#zh_Hant#僅雜湊檢查 [true|false] 默認:false
#en#If true is given, after hash check using --check-integrity option, abort download whether or not download is complete.
#en#Hash Check Only [true|false] Default:false
#hash-check-only=false

#zh_Hans#在控制台输出可读格式的大小和速度 (例如, 1.2Ki, 3.4Mi).
#zh_Hans#控制台可读输出 [true|false] 默认:true
#zh_Hant#在控制台輸出可讀格式的大小和速度 (例如, 1.2Ki, 3.4Mi).
#zh_Hant#控制台可讀輸出 [true|false] 默認:true
#en#Print sizes and speed in human readable format (e.g., 1.2Ki, 3.4Mi) in the console readout.
#en#Console Human Readable Output [true|false] Default:true
#human-readable=true

#zh_Hans#保留所有未完成的下载结果, 即使超过了 --max-download-result 选项设置的数量.
#zh_Hans#这将有助于在会话文件中保存所有的未完成的下载 (参考 --save-session 选项).
#zh_Hans#需要注意的是, 未完成任务的数量没有上限. 如果不希望这样, 请关闭此选项.
#zh_Hans#保留未完成的任务 [true|false] 默认:true
#zh_Hant#保留所有未完成的下載結果, 即使超過了 --max-download-result 選項設定的數量.
#zh_Hant#這將有助於在會話檔案中儲存所有的未完成的下載 (參考 --save-session 選項).
#zh_Hant#需要注意的是, 未完成工作的數量沒有上限. 如果不希望這樣, 請關閉此選項.
#zh_Hant#保留未完成的工作 [true|false] 默認:true
#en#Keep unfinished download results even if doing so exceeds --max-download-result.
#en#This is useful if all unfinished downloads must be saved in session file (see --save-session option).
#en#Please keep in mind that there is no upper bound to the number of unfinished download result to keep.
#en#If that is undesirable, turn this option off.
#en#Keep Unfinished Download Result [true|false] Default:true
#keep-unfinished-download-result=true

#zh_Hans#设置内存中存储最多的下载结果数量. 下载结果包括已完成/错误/已删除的下载.
#zh_Hans#下载结果存储在一个先进先出的队列中, 因此其可以存储最多指定的下载结果的数量.
#zh_Hans#当队列已满且有新的下载结果创建时, 最老的下载结果将从队列的最前部移除, 新的将放在最后.
#zh_Hans#此选项设置较大的值后如果经过几千次的下载将导致较高的内存消耗. 设置为 0 表示不存储下载结果.
#zh_Hans#注意, 未完成的下载将始终保存在内存中, 不考虑该选项的设置. 参考 --keep-unfinished-download-result 选项.
#zh_Hans#最多下载结果 默认:1000
#zh_Hant#設定記憶體中儲存最多的下載結果數量. 下載結果包括已完成/錯誤/已刪除的下載.
#zh_Hant#下載結果儲存在一個先進先出的隊列中, 因此其可以儲存最多指定的下載結果的數量.
#zh_Hant#當隊列已滿且有新的下載結果建立時, 最老的下載結果將從隊列的最前部移除, 新的將放在最後.
#zh_Hant#此選項設定較大的值後如果經過幾千次的下載將導致較高的記憶體消耗. 設定為 0 表示不儲存下載結果.
#zh_Hant#注意, 未完成的下載將始終儲存在記憶體中, 不考慮該選項的設定. 參考 --keep-unfinished-download-result 選項.
#zh_Hant#最多下載結果 默認:1000
#en#Set maximum number of download result kept in memory. The download results are completed/error/removed downloads.
#en#The download results are stored in FIFO queue and it can store at most NUM download results.
#en#When queue is full and new download result is created,
#en#oldest download result is removed from the front of the queue and new one is pushed to the back.
#en#Setting big number in this option may result high memory consumption after thousands of downloads.
#en#Specifying 0 means no download result is kept.
#en#Note that unfinished downloads are kept in memory regardless of this option value.
#en#See --keep-unfinished-download-result option.
#en#Max Download Result Default:1000
#max-download-result=1000

#zh_Hans#设置启用 MMap (参见 --enable-mmap 选项) 最大的文件大小. 文件大小由一个下载任务中所有文件大小的和决定.
#zh_Hans#例如, 如果一个下载包含 5 个文件, 那么文件大小就是这些文件的总大小. 如果文件大小超过此选项设置的大小时, MMap 将会禁用.
#zh_Hans#MMap 最大限制 默认:9223372036854775807
#zh_Hant#設定啟用 MMap (參見 --enable-mmap 選項) 最大的檔案大小. 檔案大小由一個下載工作中所有檔案大小的和決定.
#zh_Hant#例如, 如果一個下載包含 5 個檔案, 那麼檔案大小就是這些檔案的總大小. 如果檔案大小超過此選項設定的大小時, MMap 將會停用.
#zh_Hant#MMap 最大限制 默認:9223372036854775807
#en#Set the maximum file size to enable mmap (see --enable-mmap option).
#en#The file size is determined by the sum of all files contained in one download.
#en#For example, if a download contains 5 files, then file size is the total size of those files.
#en#If file size is strictly greater than the size specified in this option, mmap will be disabled.
#en#Max MMap Limit Default:9223372036854775807
#max-mmap-limit=9223372036854775807

#zh_Hans#当 --always-resume 选项设置为"否"时, 如果 aria2 检测到有 N 个 URI 不支持断点续传时, 将从头开始下载文件.
#zh_Hans#如果 N 设置为 0, 当所有 URI 都不支持断点续传时才会从头下载文件. 参见 --always-resume 选项.
#zh_Hans#最大断点续传尝试次数 默认:0
#zh_Hant#當 --always-resume 選項設定為"否"時, 如果 aria2 檢測到有 N 個 URI 不支援斷點續傳時, 將從頭開始下載檔案.
#zh_Hant#如果 N 設定為 0, 當所有 URI 都不支援斷點續傳時才會從頭下載檔案. 參見 --always-resume 選項.
#zh_Hant#最大斷點續傳嘗試次數 默認:0
#en#When used with --always-resume=false, aria2 downloads file from scratch when aria2 detects N number of URIs that does not support resume.
#en#If N is 0, aria2 downloads file from scratch when all given URIs do not support resume. See --always-resume option.
#en#Max Resume Failture Try Times Default:0
max-resume-failure-tries=0

#zh_Hans#指定启用的最低 SSL/TLS 版本.
#zh_Hans#最低 TLS 版本 [TLSv1.1|TLSv1.2|TLSv1.3] 默认:TLSv1.2
#zh_Hant#指定啟用的最低 SSL/TLS 版本.
#zh_Hant#最低 TLS 版本 [TLSv1.1|TLSv1.2|TLSv1.3] 默認:TLSv1.2
#en#Specify minimum SSL/TLS version to enable.
#en#Min TLS Version [TLSv1.1|TLSv1.2|TLSv1.3] Default:TLSv1.2
min-tls-version=TLSv1.2

#zh_Hans#日志级别 [debug|info|notice|warn|error] 默认:debug
#zh_Hant#記錄層級 [debug|info|notice|warn|error] 默認:debug
#en#Log Level [debug|info|notice|warn|error] Default:debug
log-level=warn

#zh_Hans#BitTorrent下载完成和播种结束后调用指定的命令。
#zh_Hant#BitTorrent下載完成和播種結束後調用指定的命令。
#en#For BitTorrent, a command specified in --on-download-complete is called after download completed and seeding is over.
#on-bt-download-complete=

#zh_Hans#设置下载完成后要执行的命令。（移动文件或文件夹到/downloads/recycle)
#zh_Hant#設置下載完成後要執行的命令。
#en#Set the command to be executed after download completed.
on-download-complete=/script/completed.sh

#zh_Hans#設置下載因錯誤而中止後要執行的命令。
#zh_Hant#设置下载因错误而中止后要执行的命令。
#en#Set the command to be executed after download aborted due to error.
#on-download-error=

#zh_Hans#设置下载暂停后要执行的命令。
#zh_Hant#設置下載暫停後要執行的命令。
#en#Set the command to be executed after download was paused.
on-download-pause=/script/pause.sh

#zh_Hans#设置下载开始后要执行的命令。
#zh_Hant#設置下載開始後要執行的命令。
#en#Set the command to be executed after download got started.
on-download-start=/script/start.sh

#zh_Hans#设置下载停止后要执行的命令，指定了on-download-complete和on-download-error，则不执行在此选项中指定的命令。
#zh_Hans##移动文件或文件夹至回收站/downloads/recycle,并删除.aria2后缀名文件
#zh_Hant#設置下載停止後要執行的命令，指定了on-download-complete和on-download-error，則不執行在此選項中指定的命令。
#en#Set the command to be executed after download stopped.
#en#You can override the command to be executed for particular download result using --on-download-complete and --on-download-error.
#en#If they are specified, command specified in this option is not executed.
on-download-stop=/script/stop.sh

#zh_Hans#根据可用带宽优化并发下载的数量. aria2 使用之前统计的下载速度通过规则 N = A + B Log10 (速度单位为 Mbps) 得到并发下载的数量.
#zh_Hans#其中系数 A 和 B 可以在参数中以冒号分隔自定义.
#zh_Hans#默认值 (A=5, B=25) 可以在 1Mbps 网络上使用通常 5 个并发下载, 在 100Mbps 网络上为 50 个.
#zh_Hans#并发下载的数量保持在 --max-concurrent-downloads 参数定义的最大之下.
#zh_Hans#优化并发下载 [true|false] 默认:false
#zh_Hant#根據可用頻寬最佳化同時下載的數量. aria2 使用之前統計的下載速度通過規則 N = A + B Log10 (速度單位為 Mbps) 得到同時下載的數量.
#zh_Hant#其中係數 A 和 B 可以在參數中以冒號分隔自訂.
#zh_Hant#預設值 (A=5, B=25) 可以在 1Mbps 網路上使用通常 5 個同時下載, 在 100Mbps 網路上為 50 個.
#zh_Hant#同時下載的數量保持在 --max-concurrent-downloads 參數定義的最大之下.
#zh_Hant#最佳化同時下載 [true|false] 默認:false
#en#Optimizes the number of concurrent downloads according to the bandwidth available.
#en#aria2 uses the download speed observed in the previous downloads to adapt the number of downloads launched
#en#in parallel according to the rule N = A + B Log10(speed in Mbps). The coefficients A and B can be customized
#en#in the option arguments with A and B separated by a colon.
#en#The default values (A=5, B=25) lead to using typically 5 parallel downloads on 1Mbps networks and above 50 on 100Mbps networks.
#en#The number of parallel downloads remains constrained under the maximum defined by the --max-concurrent-downloads parameter.
#en#Optimize Concurrent Downloads [true|false] Default:false
#optimize-concurrent-downloads=false

#zh_Hans#设置 HTTP/FTP 下载的分配大小. aria2 根据这个边界分割文件. 所有的分割都是这个长度的倍数.
#zh_Hans#此选项不适用于 BitTorrent 下载. 如果 Metalink 文件中包含分片哈希的结果此选项也不适用.
#zh_Hans#文件分片大小 默认:1M
#zh_Hant#設定 HTTP/FTP 下載的分配大小. aria2 根據這個邊界分割檔案. 所有的分割都是這個長度的倍數.
#zh_Hant#此選項不適用於 BitTorrent 下載. 如果 Metalink 檔案中包含分段雜湊的結果此選項也不適用.
#zh_Hant#檔案分段大小 默認:1M
#en#Set a piece length for HTTP/FTP downloads. This is the boundary when aria2 splits a file.
#en#All splits occur at multiple of this length. This option will be ignored in BitTorrent downloads.
#en#It will be also ignored if Metalink file contains piece hashes.
#en#Piece Length Default:1M
piece-length=1M

#zh_Hans#显示控制台输出 [true|false] 默认:true
#zh_Hant#顯示控制台輸出 [true|false] 默認:true
#en#Show Console Output [true|false] Default:true
#show-console-readout=true

#zh_Hans#设置下载进度摘要的输出间隔(秒). 设置为 0 禁止输出.
#zh_Hans#下载摘要输出间隔 默认:60
#zh_Hant#設定下載進度摘要的輸出間隔(秒). 設定為 0 禁止輸出.
#zh_Hant#下載摘要輸出間隔 默認:60
#en#Set interval in seconds to output download progress summary. Setting 0 suppresses the output.
#en#Download Summary Output Interval Default:60
summary-interval=0

#zh_Hans#设置全局最大下载速度 (字节/秒). 0 表示不限制. 您可以增加数值的单位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hans#全局最大下载速度 默认:0
#zh_Hant#設定全域最大下載速度 (位元組/秒). 0 表示不限制. 您可以增加數值的單位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hant#全域最大下載速度 默認:0
#en#Set max overall download speed in bytes/sec. 0 means unrestricted.
#en#You can append K or M (1K = 1024, 1M = 1024K).
#en#Global Max Download Limit Default:0
max-overall-download-limit=0

#zh_Hans#设置每个任务的最大下载速度 (字节/秒). 0 表示不限制. 您可以增加数值的单位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hans#最大下载速度 默认:0
#zh_Hant#設定每個工作的最大下載速度 (位元組/秒). 0 表示不限制. 您可以增加數值的單位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hant#最大下載速度 默認:0
#en#Set max download speed per each download in bytes/sec. 0 means unrestricted.
#en#You can append K or M (1K = 1024, 1M = 1024K).
#en#Max Download Limit Default:0
max-download-limit=0

#zh_Hans#禁用配置文件 [true|false]
#zh_Hant#停用設定檔案 [true|false]
#en#Disable Configuration File [true|false]
#no-conf=

#zh_Hans#不对比此参数设置大小小的分配文件. 您可以增加数值的单位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hans#文件分配限制 默认:5M
#zh_Hant#不對比此參數設定大小小的分配檔案. 您可以增加數值的單位 K 或 M (1K = 1024, 1M = 1024K).
#zh_Hant#檔案分配限制 默認:5M
#en#No file allocation is made for files whose size is smaller than SIZE.
#en#You can append K or M (1K = 1024, 1M = 1024K).
#en#No File Allocation Limit Default:5M
#no-file-allocation-limit=5M

#zh_Hans#启用参数化 URI 支持. 您可以指定部分的集合: http://{sv1,sv2,sv3}/foo.iso.
#zh_Hans#同时您也可以使用步进计数器指定数字化的序列: http://host/image[000-100:2].img.
#zh_Hans#步进计数器可以省略. 如果所有 URI 地址不指向同样的文件, 例如上述第二个示例, 需要使用 -Z 选项.
#zh_Hans#启用参数化 URI 支持
#zh_Hant#啟用參數化 URI 支援. 您可以指定部分的集合: http://{sv1,sv2,sv3}/foo.iso.
#zh_Hant#同時您也可以使用步進計數器指定數字化的序列: http://host/image[000-100:2].img. 步進計數器可以省略.
#zh_Hant#如果所有 URI 位址不指向同樣的檔案, 例如上述第二個示例, 需要使用 -Z 選項.
#zh_Hant#啟用參數化 URI 支援
#en#Enable parameterized URI support. You can specify set of parts: http://{sv1,sv2,sv3}/foo.iso.
#en#Also you can specify numeric sequences with step counter: http://host/image[000-100:2].img.
#en#A step counter can be omitted. If all URIs do not point to the same file, such as the second example above, -Z option is required.
#en#Enable Parameterized URI
#parameterized-uri=

#zh_Hans#禁用控制台输出 [true|false] 默认:false
#zh_Hant#停用控制台輸出 [true|false] 默認:false
#en#Disable Console Output [true|false] Default:false
quiet=false

#zh_Hans#如果提供了数据块的校验和, 将在下载过程中通过校验和验证数据块.
#zh_Hans#实时数据块验证 [true|false] 默认:true
#zh_Hant#如果提供了資料區塊的總和檢查碼, 將在下載過程中通過總和檢查碼驗證資料區塊.
#zh_Hant#即時資料區塊驗證 [true|false] 默認:true
#en#Validate chunk of data by calculating checksum while downloading a file if chunk checksums are provided.
#en#Realtime Data Chunk Validation [true|false] Default:true
#realtime-chunk-checksum=true

#zh_Hans#在下载前删除控制文件. 使用 --allow-overwrite=true 选项时, 总是从头开始下载文件.
#zh_Hans#此选项将有助于使用不支持断点续传代理服务器的用户.
#zh_Hans#删除控制文件 [true|false]
#zh_Hant#在下載前刪除控制檔案. 使用 --allow-overwrite=true 選項時, 總是從頭開始下載檔案.
#zh_Hant#此選項將有助於使用不支援斷點續傳代理伺服器的使用者.
#zh_Hant#刪除控制檔案 [true|false]
#en#Remove control file before download. Using with --allow-overwrite=true, download always starts from scratch.
#en#This will be useful for users behind proxy server which disables resume.
#en#Remove Control File [true|false]
#remove-control-file=

#zh_Hans#当退出时保存错误及未完成的任务到指定的文件中. 您可以在重启 aria2 时使用 --input-file 选项重新加载.
#zh_Hans#如果您希望输出的内容使用 GZip 压缩, 您可以在文件名后增加 .gz 扩展名.
#zh_Hans#请注意, 通过 aria2.addTorrent() 和 aria2.addMetalink() RPC 方法添加的下载, 其元数据没有保存到文件的将不会保存.
#zh_Hans#通过 aria2.remove() 和 aria2.forceRemove() 删除的下载将不会保存.
#zh_Hans#状态保存文件
#zh_Hant#當離開時儲存錯誤及未完成的工作到指定的檔案中. 您可以在重啟 aria2 時使用 --input-file 選項重新載入.
#zh_Hant#如果您希望輸出的內容使用 GZip 壓縮, 您可以在檔名後增加 .gz 副檔名.
#zh_Hant#請注意, 通過 aria2.addTorrent() 和 aria2.addMetalink() RPC 方法加入的下載, 其中繼資料沒有儲存到檔案的將不會儲存.
#zh_Hant#通過 aria2.remove() 和 aria2.forceRemove() 刪除的下載將不會儲存.
#zh_Hant#狀態儲存檔案
#en#Save error/unfinished downloads to FILE on exit.
#en#You can pass this output file to aria2c with --input-file option on restart.
#en#If you like the output to be gzipped append a .gz extension to the file name.
#en#Please note that downloads added by aria2.addTorrent() and aria2.addMetalink() RPC method and whose meta data
#en#could not be saved as a file are not saved. Downloads removed using aria2.remove() and aria2.forceRemove() will not be saved.
#en#Session Save File
save-session=/config/aria2.session

#zh_Hans#每隔此选项设置的时间(秒)后会保存错误或未完成的任务到 --save-session 选项指定的文件中.
#zh_Hans#如果设置为 0, 仅当 aria2 退出时才会保存.
#zh_Hans#保存状态间隔 默认:0
#zh_Hant#每隔此選項設定的時間(秒)後會儲存錯誤或未完成的工作到 --save-session 選項指定的檔案中.
#zh_Hant#如果設定為 0, 僅當 aria2 離開時才會儲存.
#zh_Hant#儲存狀態間隔 默認:0
#en#Save error/unfinished downloads to a file specified by --save-session option every SEC seconds.
#en#If 0 is given, file will be saved only when aria2 exits.
#en#Save Session Interval Default:0
save-session-interval=5

#zh_Hans#设置 Socket 接收缓冲区最大的字节数. 指定为 0 时将禁用此选项.
#zh_Hans#当使用 SO_RCVBUF 选项调用 setsockopt() 时此选项的值将设置到 Socket 的文件描述符中.
#zh_Hans#Socket 接收缓冲区大小 默认:0
#zh_Hant#設定 Socket 接收緩衝區最大的位元組數. 指定為 0 時將停用此選項.
#zh_Hant#當使用 SO_RCVBUF 選項調用 setsockopt() 時此選項的值將設定到 Socket 的檔案描述項中.
#zh_Hant#Socket 接收緩衝區大小 默認:0
#en#Set the maximum socket receive buffer in bytes. Specifing 0 will disable this option.
#en#This value will be set to socket file descriptor using SO_RCVBUF socket option with setsockopt() call.
#en#Socket Receive Buffer Size Default:0
#socket-recv-buffer-size=0

#zh_Hans#在此选项设置的时间(秒)后关闭应用. 如果设置为 0, 此功能将禁用.
#zh_Hans#自动关闭时间 默认:0
#zh_Hant#在此選項設定的時間(秒)後關閉應用程式. 如果設定為 0, 此功能將停用.
#zh_Hant#自動關閉時間 默認:0
#en#Stop application after SEC seconds has passed. If 0 is given, this feature is disabled.
#en#Auto Shutdown Time Default:0
#stop=0

#zh_Hans#缩短控制台输出的内容在一行中.
#zh_Hans#缩短控制台输出内容 [true|false] 默认:true
#zh_Hant#縮短控制台輸出的內容在一行中.
#zh_Hant#縮短控制台輸出內容 [true|false] 默認:true
#en#Truncate console readout to fit in a single line
#en#Truncate Console Output [true|false] Default:true
#truncate-console-reado=true
